package com.sunsigne.reversedrebecca.object.extrabehaviors.interactive.livings.players.behaviors;

import com.sunsigne.reversedrebecca.characteristics.PlayerHealth;
import com.sunsigne.reversedrebecca.object.extrabehaviors.behaviors.Behavior;
import com.sunsigne.reversedrebecca.object.extrabehaviors.behaviors.TickBehavior;
import com.sunsigne.reversedrebecca.object.extrabehaviors.interactive.livings.behaviors.Blinking;
import com.sunsigne.reversedrebecca.object.extrabehaviors.interactive.livings.players.Player;

public class HasInvulnerabilityFrame implements TickBehavior {

	public HasInvulnerabilityFrame(Player player) {
		this.player = player;
	}

	////////// BEHAVIOR ////////////

	private Player player;

	@Override
	public Player getExtraBehaviorsObject() {
		return player;
	}

	////////// TICK ////////////

	private int registered_hp = PlayerHealth.getInstance().getHp();

	@Override
	public void tick() {
		// prevent being hurt while recovering
		if (isRecovering)
			PlayerHealth.getInstance().setHp(registered_hp);

		int hp = PlayerHealth.getInstance().getHp();

		// player is hurt
		if (hp < registered_hp) {
			isRecovering = true;
			time = RECOVERING_TIME;
			registered_hp = hp;
		}

		// player is recovering
		if (isRecovering)
			recoveringProcess();
	}

	private boolean isRecovering;
	private final int RECOVERING_TIME = 30;
	private int time = RECOVERING_TIME;

	private Behavior blinking;
	
	private void recoveringProcess() {
		time--;

		if (time == RECOVERING_TIME - 1) {
			blinking = new Blinking(player, RECOVERING_TIME);
			player.addBehavior(blinking);
		}

		if (time <= 0) {
			isRecovering = false;
			time = RECOVERING_TIME;
		}
	}

}
