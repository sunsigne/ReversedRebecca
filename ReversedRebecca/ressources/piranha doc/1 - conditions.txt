////// TIME //////


Le Type de Condition TIME est vérifiée à chaque seconde !
ex : TIME -> 6 = "Requête"
"Requête" sera appelé après exactement 6 secondes.

Cette fonction est très utile juste après la génération d'une map : TIME -> 0 pour initier l'état de base d'un objet.


////// SAVED //////


Le Type de Condition SAVED est lancé juste après le chargement de la map (et après le TIME -> 0, qui est un initiateur d'état)

ex : SAVED -> REBECCAS_ROOM*NO_CLOTHES_ON_DRESSER = GOTO -> CLEAN_CLOTHES
La Requête (GOTO -> CLEAN_CLOTHES) sera appelé si REBECCAS_ROOM*NO_CLOTHES_ON_DRESSER est une donnée qui a été sauvegardée (voir "requêtes memory.txt").

Note : Le Type de Requête SOUND est ignoré lorsque le Type de Condition est SAVED, ce qui facilite grandement la tâche !


////// UNLOCKEDTOOL //////


Le Type de Condition UNLOCKEDTOOL est vérifiée au moment où le joueur atteint (exactement) le niveau de l'outil en question.
exemple : UNLOCKEDTOOL -> KEY:CYAN = "Requête"

La "Requête" sera effectué aussitôt que le joueur atteindra le niveau CYAN dans l'outil KEY. 

Note : Ce Type de Condition est désactivé lors du chargement de la map. Ainsi, lorsque le Joueur apparaît "de base" avec un niveau CYAN dans l'outil KEY, la Condition "UNLOCKEDTOOL -> KEY:CYAN" ne pourra pas être remplie.
Attention : si le joueur ramasse l'objet "YELLOW KEY" mais ne peut QUE atteindre le niveau "GREEN" de l'outil "KEY", il atteindra naturellement le niveau "GREEN" en "KEY" au moment du ramassage. La condition qui sera validée sera donc : "UNLOCKEDTOOL -> KEY:GREEN" et non "UNLOCKEDTOOL -> KEY:YELLOW"

Note : Tous les outils et niveaux sont détaillés dans le fichier "mappable" (dans le dossier "maps")


////// UNLOCKEDTOOLMAXLEVEL //////

Le Type de Condition UNLOCKEDTOOLMAXLEVEL fonctionne exactement de la même manière que le Type de Condition UNLOCKEDTOOL, à la différence près qu'il ne se déclenche par lorsque le joueur atteint le niveau de l'outil en question, mais lorsqu'il "débloque la possibilité" d'atteindre ce niveau en question avec cet outil ; ce qui arrive généralement après l'ouverture d'un coffre.


////// WONPUZZLE //////


Le Type de Condition WONPUZZLE est vérifiée lorsque le puzzle aux coordonnées indiquées est résolu.
exemple : WONPUZZLE -> 34-31 = "Requête"


////// TALKED //////


Le Type de Condition TALKED est vérifiée lorsqu'un dialogue est terminé.
exemple : TALKED -> COMPUTER = "Requête"
"Requête" sera appelé au moment où le joueur sort de la boite de dialogue dont le fichier de référence était COMPUTER.csv.

Couplé au type d'action TRIPLE_ACTION, elle est très pratique pour initier les possibilités suivantes de dialogues ou les actions déverrouillées.
exemple :
TALKED -> PEEBOY_URGE = TRIPLE_ACTION -> TALK:PEEBOY_HOLDING
TALKED -> PEEBOY_HOLDING = TRIPLE_ACTION -> TALK:PEEBOY_HOLDING_AGAIN
TALKED -> PEEBOY_HOLDING_AGAIN = TRIPLE_ACTION -> TALK:PEEBOY_HOLDING_AGAIN_AGAIN 


////// GOAL //////


Le Type de Condition GOAL est vérifiée lorsque l'objet a atteint son Objectif.
ex : GOAL -> 37-43 = "Requête"
"Requête" sera appelé si l'objet avait pour Objectif 37-43 et y est finalement arrivé.

Pour établir un Objectif, il faut utiliser les types d'actions MOVE, FAST ou SLOW

Attention ! La Condition n'est vérifiée que lorsque la Valeur est bien l'Objectif de l'objet ! S'il y passe où s'y arrête, mais qu'il cherchait à se rendre ailleurs, cela ne comptera pas !
exemple dans notre monde : si Bernard est en France et que son Objectif est la Chine. Même si Bernard passe par la Russie, la Condition "GOAL -> RUSSIE" ne sera pas atteint puisqu'elle n'est pas son Objectif (son "GOAL").

Attention ! Contrairement aux autres conditions, GOAL n'a qu'une portée locale : TIME est vérifié partout, WONPUZZLE est vérifié partout, mais pour GOAL, c'est la position de l'objet en question qui est vérifiée.


////// GOTO //////


GOTO n'est pas un Type de Condition mais un Type de Requête. Il permet de créer des Conditions.

Pour rappel, il est impossible en Piranha d'avoir deux Conditions identiques.
exemple :
TIME -> 0 = NAME -> BOB
TIME -> 0 = FACING -> DOWN
ne marchera pas !

Si l'on veut plusieurs Instructions avec la même Condition, il faut passer par GOTO
exemple :
TIME -> 0 = GOTO -> MY_NAME, MY_FACING
$ -> MY_NAME = NAME -> BOB
$ -> MY_FACING = FACING -> DOWN

Ici, Ces 3 Requêtes seront effectuées aussitôt que TIME aura pour valeur 0.
Le Type de Condition "$" est donc une sorte de relai d'une autre Condition.


GOTO créé des Conditions à portée locale, aucun risque de valider la Condition d'un autre fichier par accident !


////// AFFECTING //////


AFFECTING est en quelque sorte la variante à cible unitaire et globale de GOTO.

Il a plusieurs différences notables avec ce dernier :

- GOTO autorise plusieurs Cibles, AFFECTING n'en autorise qu'une seule.
- GOTO peut soit créer des "balises", soit exéctuer des instructions grâce à l'écriture compacte. AFFECTING ne permet QUE de créer des "balises" (à portée globale) : l'écriture compacte est donc interdite lorsque AFFECTING est le Type de Requête (cela n'aurait aucun sens !) Elle reste bien sûr possible lorsque AFFECTING a le rôle de Cible.
exemple : 
TIME -> 0 = GOTO -> AFFECTING:COMPUTER_INIT (autorisé)
TIME -> 0 = AFFECTING -> COMPUTER_INIT (autorisé)
TIME -> 0 = AFFECTING -> MOVE:10-20 (interdit, cela n'aurait aucun sens !)

- Le Type de Condition "$" est remplacé par "!" afin de mieux faire la différence avec GOTO.
ex : 
(file 1) GOAL -> 33-33 = AFFECTING -> BOB_REACHED_GOAL
(file 2) ! -> BOB_REACHED_GOAL = FACING -> BOB