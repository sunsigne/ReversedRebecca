////// Introduction //////


Piranha est un langage de programmation inventé par Florian Murcia en 2022 pour le jeu vidéo Reversed Rebecca.
Piranha vient de l'animal, sans raison autre que le mot sonnait bien et qu'on le retenait facilement.

Le Piranha a pour principal objectif de contrôler le comportement d'objets en Java, au travers d'une interface beaucoup plus facilement éditable qu'en Java.

L'avantage du Piranha est qu'il peut très facilement être lu, écrit et édité en remplaçant par un éditeur de texte ou de contenu csv

Les éditeurs de code actuels ne reconnaissant pas encore le Piranha comme langage, c'est pourquoi nous vous conseillons, afin de gagner en visibilité, de configurer vous-même la colorisation syntaxique.
Pour celà, vous pouvez simplement prendre un éditeur de code acceptant le csv et définir l'espace (" ") comme élément séparateur.


////// Fichier //////

Un fichier Piranha est le "cerveau" d'un objet Piranha. Si l'objet n'est pas présent dans le niveau, son cerveau seul ne fera rien du tout.
Pour qu'un objet Piranha soit dans le niveau, il suffit soit de l'introduire sur la map (voir "mappable" dans le dossier "maps"), soit qu'un autre objet Piranha l'ait créé (voir "requêtes de création")
Seule exception, l'objet SET-UP qui est créé automatiquement lors du chargement d'une map (à des coordonnées négatives, donc impossible à atteindre avec du Piranha).

Actuellement, les fichiers en Piranha lus et traités par Java sont les fichiers dont l'extension est .csv, et dont les noms sont PLAYER, SET-UP, compris entre NPC-01 et NPC-30, ou compris entre OBJ-01 à OBJ-50.

Note : les fichiers Piranha ont tous un nom qui fait exactement 6 caractères. Cette règle ne peut pas être transgressée.
Note : il est conseillé dans chaque dossier de map, bien que totalement facultatif, de créer un fichier codex.txt référençant les différents fichiers piranha présent dans ce même dossier, en y renseignant le nom des objets ou personnages qu'ils incarnent ; il devient plus facile de s'y retrouver à travers ces derniers.

Le mot "objet" sera parfois utilisé de façon générique alors que le Type de Requête ne s'applique qu'aux personnages.
En effet, certains objets sont des objets, d'autre des personnages. Pour l'expliquer simplement, plus de requêtes sont possibles sur les personnages : INVULNERABLE, MOVE, etc. (oui, les objets sont immobiles).


////// Nomenclature //////


Prenons l'exemple suivant : GOAL -> 33-33 = FACING -> LEFT
Ce que cette ligne fait n'a aucune importance ici.

Un telle ligne de code est appelée une "Instruction".
L'ensemble "GOAL -> 33-33" est appelé la "Condition" de l'Instruction.
L'ensemble "FACING -> LEFT" est appelé la "Requête" de l'Instruction.

GOAL est le "Type de Condition" de l'Instruction.
33-35 est la "Valeur" de l'Instruction.
FACING est le "Type de Requête" de l'Instruction.
LEFT est la "Cible" de l'Instruction.


////// Syntaxe //////


Le Piranha n'est pas sensible à la case : les espaces (" ") permettent de gagner en lisibilité, mais n'ont aucune incidence sur le code.
En Piranha, si ça n'est pas obligatoire, il est conseillé d'écrire les Instructions en lettres capitales.
Attention ! Les coordonnées négatives sont impossibles en Piranha. Le point 0-0 se situe en haut à gauche de votre map.
Pour écrire des commentaires dans votre code, vous pouvez le faire n'importe où ! Si la syntaxe n'est pas reconnue comme étant une Instruction, rien ne se passera. Évitez cependant d'utiliser les caractères "->" et "=" dans un commentaire, votre fichier risquerait d'être invalide.

Une Instruction s'écrit de la façon suivante : WONPUZZLE -> 34-31 = TP -> 37-42
Ici, il faut comprendre : "si le puzzle en 34-31 est résolu, alors se téléporter en 37-42"

ATTENTION ! Il n'est pas possible d'avoir deux Conditions identiques ("Type de Condition -> Valeur") dans un même fichier Piranha ; seule la première sera traitée. L'utilisation de Conditions identiques dans des fichiers indépendants les uns des autres ne pose aucun problème.
Si vous avez besoin d'effectuer plusieurs Instructions vérifiant la même Condition, utiliser le Type d'Action GOTO.
