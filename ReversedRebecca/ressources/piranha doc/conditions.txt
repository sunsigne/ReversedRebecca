////// TIME //////


Le Type de Condition TIME est vérifié à chaque seconde !

Exemple :
TIME -> 6 = "Requête"

"Requête" sera appelé exactement 6 secondes après le chargement de la carte.

Ce Type de Condition est très utile juste après la génération d'une carte (TIME -> 0) pour initier l'état de base d'un objet.


////// SAVED //////


Le Type de Condition SAVED est lancé juste après le chargement de la carte (et après l'initiateur d'état « TIME → 0 »).

Exemple :
SAVED -> PSYCOPATH*SARAH_SEQUESTRATION = GOTO -> NO_SARAH

"Requête" sera appelé si PSYCOPATH*SARAH_SEQUESTRATION est une donnée présente dans le fichier de sauvegarde (voir la partie « Requêtes Memory »).

Note : Par souci d'ergonomie, le Type de Requête SOUND est ignoré lorsque le Type de Condition est SAVED.



////// WONPUZZLE //////


Le Type de Condition WONPUZZLE est vérifié lorsque le puzzle, initié par le puzzler aux coordonnées indiquées, est résolu.

Exemple :
WONPUZZLE -> 34-31 = "Requête"

"Requête" sera appelé lorsque le puzzle initié par le puzzler en x = 34 et y = 31 est résolu.


////// UNLOCKEDTOOL //////


Le Type de Condition UNLOCKEDTOOL est vérifié au moment où le joueur atteint (exactement) le niveau de l'outil en question.

Exemple :
UNLOCKEDTOOL -> KEY:CYAN = "Requête"

"Requête" sera effectué aussitôt que le joueur atteindra le niveau CYAN avec l'outil KEY. 

Note : Ce Type de Condition n'est pas désactivé lors du chargement de la carte. Ainsi, lorsque le joueur apparaît "de base" sur la carte avec un niveau CYAN dans l'outil KEY grâce à une compétence, la Condition "UNLOCKEDTOOL → KEY:CYAN" est immédiatement remplie.

ATTENTION ! si le joueur ramasse l'objet "YELLOW KEY" mais qu'il ne peut « que » atteindre le niveau "GREEN" de l'outil "KEY", la condition qui sera validée sera logiquement : "UNLOCKEDTOOL -> KEY:GREEN".

Note : Tous les outils et niveaux sont détaillés dans le fichier "mappable" (dans le dossier "maps")


////// UNLOCKEDTOOLMAXLEVEL //////


Le Type de Condition UNLOCKEDTOOLMAXLEVEL fonctionne de la même façon que le Type de Condition UNLOCKEDTOOL, à la différence près que sa condition de déclenchement est lorsque le joueur acquiert la compétence d'atteindre le niveau renseigné avec l'outil renseigné (par exemple, lors de l'ouverture d'un coffre).


////// PICKUPLOOT //////


Le Type de Condition PICKUPLOOT est vérifié lorsque l'objet « ramassable » aux coordonnées indiquées est ramassé.

Exemple :
PICKUPLOOT -> 34-31 = "Requête"

"Requête" sera appelé lorsque l'objet en x = 34 et y = 31 est ramassé.


////// BOSS //////


Le Type de Condition BOSS est vérifié à chaque fois qu'un boss entre ou sort de sa phase de repos.

Exemple :
BOSS → REST = "Requête"

"Requête" sera effectué aussitôt que le boss entrera dans sa phase de repos. 

Note : Pour vérifier si le boss sort de sa phase de repos, remplacer la Valeur « REST » par « READY ».



////// PUSHED //////


Le Type de Condition PUSHED est vérifié à chaque fois que l'objet, dont le NAME (voir « NAME » dans la partie « Requêtes state ») correspond à la Valeur renseignée, est poussé.

Exemple :
PUSHED -> REBECCA = "Requête"

"Requête" sera appelé lorsque « Rebecca » est poussé.

ATTENTION ! Une Instruction comportant ce Type de Condition sera déclenché à chaque poussée de l'objet ! Soyez précis lors de son utilisation, par exemple en l'encadrant de conditions supplémentaires (voir la partie « Écriture Conditionnelle »).

ATTENTION ! Le Type de Condition PUSHED ne permet pas d'utiliser les mots PLAYER et OBJECT pour faire référence respectivement au joueur et à l'objet actuel.


////// TALKED //////


Le Type de Condition TALKED est vérifié lorsqu'un dialogue est terminé.

Exemple :
TALKED -> COMPUTER = "Requête"

"Requête" sera appelé au moment où le joueur sort de la boite de dialogue dont le fichier de référence était COMPUTER.csv.

Note : couplé aux Types de Requêtes d'actions (voir la partie « Requêtes actions »), le Type de Condition TALKED est très pratique pour initier les possibilités de dialogues suivants.

Exemple :
TALKED -> JEAN_URGE = ACTION_ONE → TALK:JEAN_HOLDING
TALKED -> JEAN_HOLDING = ACTION_ONE → TALK:JEAN_TOO_LATE
...


////// GOAL //////


Le Type de Condition GOAL est vérifié lorsque l'objet a atteint son Objectif (voir la partie « Requêtes Move »).

ex : GOAL -> 37-43 = "Requête"
"Requête" sera appelé si l'objet avait pour Objectif 37-43 et y est finalement arrivé.

Attention ! La Condition n'est vérifiée que lorsque la Valeur est bien l'Objectif de l'objet ! S'il y passe où s'y arrête, mais qu'il cherchait à se rendre ailleurs, cela ne comptera pas !
exemple dans notre monde : si Bernard est en France et que son Objectif est la Chine. Même si Bernard passe par la Russie, la Condition "GOAL -> RUSSIE" ne sera pas atteint puisqu'elle n'est pas son Objectif (son "GOAL").

Attention ! Contrairement aux autres conditions, GOAL n'a qu'une portée locale : TIME est vérifié partout, WONPUZZLE est vérifié partout, mais pour GOAL, c'est la position de l'objet en question qui est vérifiée.


////// GOTO //////


GOTO n'est pas un Type de Condition, mais un Type de Requête. Il permet de créer des Conditions.

Pour rappel, il est impossible en Piranha d'avoir deux Conditions identiques.

Exemple :
TIME -> 0 = NAME -> BOB
TIME -> 0 = FACING -> DOWN
est interdit !

Si l'on veut exécuter plusieurs Instructions à partir d'une même Condition, l'alternative est de créer des « balises GOTO ».

Exemple :
TIME -> 0 = GOTO -> MY_NAME, MY_FACING
$ -> MY_NAME = NAME -> BOB
$ -> MY_FACING = FACING -> DOWN

Ici, les Conditions des 2ème et 3ème lignes seront vérifiées aussitôt que la Condition « TIME → 0 » sera vérifiée ! Le Type de Condition "$" est donc une sorte de relais d'une autre Condition.

Note : GOTO créé des Conditions à portée locale, il n'est alors pas possible de valider la Condition d'un autre fichier par accident.


////// AFFECTING //////


AFFECTING est en quelque sorte la variante globale de GOTO, même s'il existe plusieurs différences entre les deux :

- GOTO autorise plusieurs Cibles, AFFECTING n'en autorise qu'une seule (sauf cas de figure spécifique précisé plus bas).

- GOTO permet dans sa Cible l'utilisation de l’écriture compacte, ce qui est impossible avec AFFECTING. 

Exemple :
TIME -> 0 = GOTO -> AFFECTING:COMPUTER_INIT (autorisé)
TIME -> 0 = AFFECTING -> COMPUTER_INIT (autorisé)
TIME -> 0 = AFFECTING -> TP:10-20 (interdit, cela n'aurait aucun sens !)

- GOTO vérifient les Types de Condition "$".
AFFECTING vérifient les Types de Condition "!". 

Exemple :
(fichier 1) GOAL -> 33-33 = AFFECTING -> BOB_REACHED_GOAL
(fichier 2) ! -> BOB_REACHED_GOAL = FACING -> UP

Il est possible d'ajouter une Cible supplémentaire au Type de Requête AFFECTING afin de cibler un objet dont le NAME (voir « NAME » dans la partie « Requêtes state ») correspond à ladite Cible. Cette Cible se place avant la Cible principale et doit être séparée de cette dernière par un symbole d'étoile ("*") au lieu de la virgule ("," utilisée habituellement. 

Note : il est conseillé de procéder de cette façon le plus souvent possible, car le jeu offrira de meilleures performances (un seul fichier à scanner).

Exemple :
(fichier 1) GOAL -> 33-33 = AFFECTING -> BOB*BOB_REACHED_GOAL
(fichier 2) TIME -> 0 = NAME -> BOB
(fichier 2) ! -> BOB_REACHED_GOAL = FACING -> UP
(fichier 3) ! -> BOB_REACHED_GOAL = FACING -> UP

Dans cet exemple, la Requête AFFECTING initiée par le premier fichier n'affectera que le deuxième objet – rebaptisé "BOB" –.

Note : il existe également un Type de Requête SPAM_AFFECTING qui est une variante de AFFECTING, encadré par un système "anti-spam" : tant que cette requête est spammée (c.-à-d. appelée un grand nombre de fois en très peu de temps), elle est "mise en attente" et ne s'effectuera qu'à l'arrêt du spam.