////// TIME //////

Le Type de Condition TIME est vérifié à chaque seconde !

Exemple :
TIME -> 6 = "Requête"

"Requête" sera appelé exactement six secondes après le chargement de la carte.

Il est très courant d'utiliser ce Type de Condition juste après la génération d'une carte (TIME -> 0) pour initier l'état de base des objets.



////// SAVED //////

Le Type de Condition SAVED est lancé juste après le chargement de la carte et permet de vérifier si la Valeur est une donnée enregistrée dans la sauvegarde du jeu.

Exemple :
SAVED -> PSYCOPATH*SARAH_SEQUESTRATION = "Requête"

"Requête" sera appelé si « PSYCOPATH*SARAH_SEQUESTRATION » est une donnée présente dans la sauvegarde du jeu (voir « SAVE » dans la partie « Piranha – Types de Requêtes : Memory »).

Note : par souci d'ergonomie, le Type de Requête SOUND est ignoré lorsque le Type de Condition est SAVED.



////// WONPUZZLE //////

Le Type de Condition WONPUZZLE est vérifié lorsque le puzzle, initié par le puzzler aux coordonnées indiquées en Valeur, est résolu.

Exemple :
WONPUZZLE -> 10-20 = "Requête"

"Requête" sera appelé lorsque le puzzle lancé par le puzzler en X=10 Y=20 est résolu.



////// UNLOCKEDTOOL //////

Le Type de Condition UNLOCKEDTOOL est vérifié au moment où le joueur atteint (exactement) le niveau de l'outil en question.

Exemple :
UNLOCKEDTOOL -> KEY:CYAN = "Requête"

"Requête" sera effectué aussitôt que le joueur atteindra le niveau CYAN avec l'outil KEY. 

Note : Ce Type de Condition n'est pas désactivé lors du chargement de la carte. Ainsi, lorsque le joueur apparaît "de base" sur la carte avec un niveau CYAN dans l'outil KEY grâce à une compétence, la Condition "UNLOCKEDTOOL -> KEY:CYAN" est immédiatement remplie.

Attention ! si le joueur ramasse l'objet "YELLOW KEY" mais qu'il ne peut « que » atteindre le niveau "GREEN" de l'outil "KEY", la Condition qui sera validée sera logiquement : "UNLOCKEDTOOL -> KEY:GREEN".



////// UNLOCKEDTOOLMAXLEVEL //////

Le Type de Condition UNLOCKEDTOOLMAXLEVEL a exactement le même effet et est soumis aux mêmes règles que Type de Requête UNLOCKEDTOOL.

LLa seule différence avec ce dernier est que pour UNLOCKEDTOOLMAXLEVEL, la Condition de déclenchement est que le joueur acquiert la compétence d'atteindre le niveau renseigné avec l'outil renseigné (par exemple, lors de l'ouverture d'un coffre).



////// PICKUPLOOT //////

Le Type de Condition PICKUPLOOT est vérifié lorsque l'objet « ramassable » aux coordonnées indiquées est ramassé (par le joueur).

Exemple :
PICKUPLOOT -> 10-20 = "Requête"

"Requête" sera appelé lorsque l'objet en X=10 Y=20 est ramassé par le joueur.



////// BOSS //////

Le Type de Condition BOSS est vérifié à chaque fois qu'un boss change de phase.

Les différentes phases qu'il est possible de vérifier sont les suivantes :
- REST : le boss entre dans sa phase de repos.
- READY : le boss entre dans sa phase d'attaque.

Exemple :
BOSS -> REST = "Requête"

"Requête" sera effectué aussitôt que le boss entrera dans sa phase de repos.



////// PUSHED //////


Le Type de Condition PUSHED est vérifié à chaque fois que l'objet, dont le nom (voir « NAME » dans la partie « Requêtes state ») correspondant à la Valeur, est poussé.

Exemple :
PUSHED -> REBECCA = "Requête"

"Requête" sera appelé lorsque « Rebecca » est poussé.

ATTENTION ! Une Instruction comportant ce Type de Condition sera déclenché à chaque poussée de l'objet ! Soyez précis lors de son utilisation, par exemple en l'encadrant de conditions supplémentaires (voir la partie « Écriture Conditionnelle »).

ATTENTION ! Le Type de Condition PUSHED ne permet pas d'utiliser les mots PLAYER et OBJECT pour faire référence respectivement au joueur et à l'objet actuel.


////// TALKED //////

Le Type de Condition TALKED est vérifié lorsqu'un dialogue est terminé.

Exemple :
TALKED -> COMPUTER = "Requête"

"Requête" sera appelé au moment où le joueur sort de la boite de dialogue dont le fichier de référence est « computer.txt ».

Note : couplé aux Types de Requêtes d'actions (voir la partie « Piranha – Types de Requêtes : Actions »), le Type de Condition TALKED est très pratique pour initier les possibilités de dialogues suivants.

Exemple :
TALKED -> JEAN_URGE = ACTION_ONE -> TALK:JEAN_HOLDING
TALKED -> JEAN_HOLDING = ACTION_ONE -> TALK:JEAN_TOO_LATE
...


////// SELFTALKING //////

Le Type de Condition SELFTALKING a exactement le même fonctionnement que le Type de Condition TALKED, à la différence près que ce premier à une portée semi-global au lieu de global.

En effet, le Type de Condition SELFTALKING n'est vérifiée que pour (tous) les objets Piranha partageant le fichier étant à l'origine de l'Instruction ayant initié le dialogue.
Par exemple, si trois plantes sur la map partagent le même fichier Piranha, "parler" à l'une d'elle vérifiera la Condition SELFTALKING pour les trois.

Note : la raison de l'existance de ce Type de Condition est purement une question d'optimisation : moins de fichiers sont analysés.



////// GOAL //////

Le Type de Condition GOAL est vérifié lorsque l'objet atteint son Objectif (voir « Goal » dans la partie « NPC »).

Exemple :
GOAL -> 10-20 = "Requête"

"Requête" sera appelé si l'objet avait pour Objectif X=10 Y=20, et qu'il vient d'arriver à cette Position.

Attention ! La Condition n'est vérifiée que lorsque la Valeur est bien l'Objectif de l'objet ! S'il y passe où s'y arrête, mais qu'il cherchait à se rendre ailleurs, cela ne comptera pas !

Attention ! Contrairement aux autres Type de Conditions, GOAL n'a qu'une portée locale ! TIME est vérifié partout, WONPUZZLE est vérifié partout… Mais pour GOAL, c'est la Position de l'objet ACTUEL qui est vérifiée.



////// GOTO //////

GOTO n'est pas un Type de Condition, mais un Type de Requête. Il permet de créer des Conditions.

Pour rappel, il est impossible en Piranha d'avoir deux Conditions identiques.

Exemple :
TIME -> 0 = NAME -> BOB
TIME -> 0 = FACING -> DOWN
est interdit !

Si l'on veut exécuter plusieurs Instructions à partir d'une même Condition, l'alternative est de créer des « balises GOTO ».

Exemple :
TIME -> 0 = GOTO -> MY_NAME, MY_FACING
$ -> MY_NAME = NAME -> BOB
$ -> MY_FACING = FACING -> DOWN

Explication : ici, les Conditions des 2ème et 3ème lignes seront vérifiées aussitôt que la Condition « TIME -> 0 » sera vérifiée ! Le Type de Condition « $ » est donc une sorte de relais d'une autre Condition.

Note : GOTO créé des Conditions à portée locale, il n'est alors pas possible de valider la Condition d'un autre fichier par accident.



////// AFFECTING //////

AFFECTING est en quelque sorte la variante globale de GOTO, avec quelques différences :

GOTO autorise plusieurs Cibles, AFFECTING n'en autorise qu'une seule (sauf cas de figure spécifique précisé plus bas).

GOTO permet dans sa Cible l'utilisation de l’Écriture Compacte, ce qui est impossible avec AFFECTING.
Exemple :
TIME -> 0 = GOTO -> AFFECTING:COMPUTER_INIT (autorisé)
TIME -> 0 = AFFECTING -> COMPUTER_INIT (autorisé)
TIME -> 0 = AFFECTING -> TP:10-20 (interdit, cela n'aurait aucun sens !)

GOTO vérifient les Types de Condition « $ ». AFFECTING vérifient les Types de Condition « ! ».
Exemple :
(fichier 1) GOAL -> 10-20 = AFFECTING -> BOB_REACHED_GOAL
(fichier 2) ! -> BOB_REACHED_GOAL = FACING -> UP


Il est possible d'ajouter une Cible supplémentaire au Type de Requête AFFECTING afin de cibler un objet dont le nom (voir « NAME » dans la partie « Piranha – Types de Requêtes : State ») correspond à ladite Cible. Cette Cible se place avant la Cible principale et doit être séparée de cette dernière par un symbole d'étoile ("*") au lieu de la virgule (",") utilisée habituellement. 

Note : il est conseillé de procéder de cette façon le plus souvent possible, car le jeu offrira de meilleures performances (un seul fichier à scanner).

Exemple :
(fichier 1) GOAL -> 33-33 = AFFECTING -> BOB*BOB_REACHED_GOAL
(fichier 2) TIME -> 0 = NAME -> BOB
(fichier 2) ! -> BOB_REACHED_GOAL = FACING -> UP
(fichier 3) ! -> BOB_REACHED_GOAL = FACING -> UP

Dans cet exemple, la Requête AFFECTING initiée par le premier fichier n'affectera que le 2ème objet, rebaptisé « BOB ».


Il existe également un Type de Requête SPAM_AFFECTING qui est une variante de AFFECTING, encadré par un système "anti-spam" : tant que cette Requête est spammée (c.-à-d. appelée un grand nombre de fois en très peu de temps), elle est "mise en attente" et ne s'effectuera qu'à l'arrêt du spam.
