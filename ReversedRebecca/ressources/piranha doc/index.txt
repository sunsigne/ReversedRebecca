Certains Types de Requêtes ont pour Cible la Position d'un objet (voir page suivante). Dans la mesure où plusieurs objets peuvent se trouver au même endroit, il devient nécessaire de faire intervenir un Index afin d'assurer une correcte sélection. L'Index peut être renseigné sous deux formes : en lettres lors de la création d'un objet (« FRONT » ou « BACK »), ou en nombre, lors de sa recherche. La relation entre ces deux représentations fonctionne comme suit :

- FRONT attribue le dernier Index chiffré disponible (c.-à-d. le plus haut)
- BACK attribue l'Index chiffré 1 ("poussant" au passage tous les autres objets vers des Index plus élevés).

L'avantage de choisir FRONT : les objets auront tendance à garder le même Index.
L'avantage de choisir BACK : l'objet le plus récent aura toujours un Index de 1.

Attention ! Lorsque deux objets ont des visuels qui se superposent, celui apparaissant "devant" l'autre est celui dont l'Index est le plus élevé – d'où le choix de la désignation « FRONT » –. Pour rappel, les objets Piranha n'ont aucun visuel (sauf lorsqu'il s'agit de NPC).

Lors du renseignement numéroté, un Index trop élevé sera systématiquement ramené à l'Index le plus haut trouvé : s'il n'y a qu'un objet et que vous renseignez un Index « 3 », l'Index sera "lu" comme étant « 1 ».


////// Cas Pratique //////


Nous avons besoin qu'un NPC parle à travers une porte, à partir d'une action (événement non prévu par le moteur du jeu). Nous devons donc "désactiver" la porte (voir « DISABLE » dans la partie « Piranha – Type de Requêtes : Interactives »), créer un objet Piranha à son emplacement, et coder son comportement de sorte qu'il imite les actions du NPC. Lorsque nous voulons désactiver la porte, nous pouvons renseigner l'Index 2 pour la sélectionner (considéré comme 1 puisqu'un seul objet présent). Nous créons ensuite l'objet Piranha au niveau de la porte avec un Index BACK, (il prendra alors l'Index 1 et "poussera" la porte en Index 2). Lorsque nous ferons référence à la porte par la suite, nous pouvons continuer à utiliser l'Index 2 (qui sera cette fois "officiellement" le bon) : nous aurons donc utilisé le même Index (2) tout au long de notre code pour désigner la porte. À noter qu'il était également tout à fait possible de choisir de garder l'Index 1 pour la porte et de créer l'objet Piranha en FRONT.

Note : la mécanique d'Index est assez complexe à prendre en main. Voici deux conseils pour vous aider :
- 95 % du temps, vous n'aurez affaire qu'à un seul objet (donc Index 1).
- Dans le cas de plusieurs objets, il est toujours possible de brute force ! Faites des essais jusqu'à obtenir le résultat souhaité : connaître le fonctionnement détaillé de l'Index n'est utile que lorsque le brute force a du mal à fonctionner.


////// Position //////


La Position d'un objet Piranha est la "case" sur laquelle il se trouve. Lorsqu'un objet est créé, il l'est sur la case exacte. Si un objet se déplace et que l'on cherche implicitement sa Position – par exemple, avec les Types de Requête DISABLE ou DELETE (voir respectivement les parties « Piranha – Type de Requêtes : Interactives » et « Piranha – Type de Requêtes : Création ») –, la case sur laquelle il est "compté" est la case sur laquelle il se trouve en majorité. Lorsque plusieurs objets se trouvent sur la même case, l'Index permet d'affiner la sélection.

À ces règles existe une exception : pour des raisons de Path Finding, le joueur est considéré comme étant sur une case même si un seul de ces pixels touche celle-ci. Il est ainsi le seul objet pouvant se trouver officiellement sur plusieurs cases en même temps. Cependant, il n'est pas possible de sélectionner le joueur à partir d'un Index (mesure de sécurité mise en place afin d'éviter son effacement involontairement). 


////// Couches //////


Une notion importante à ne jamais oublier en Piranha et celle des Layer – « couches » en français, mais il faut comprendre « étages » –.

À CHAQUE FOIS qu'il est question d'une Position en Piranha, la Position en question est cherchée sur la même Layer que l'objet faisant la demande. Par exemple, si un objet souhaite vérifier que le puzzle d'un autre « étage » est résolu, il ne doit pas utiliser le Type de Condition WONPUZZLE (voir la partie « Piranha – Conditions ») qui n'est vérifié que sur le sien, mais passer par un AFFECTING, indépendant de la Position, donc applicable partout.

Attention ! L'objet SET-UP, qui est créé sur la même Layer que le joueur lors du chargement d'une carte, et est également soumis à cette règle !


////// Sous-Couches //////

Les Sous-Couches sont au nombre de trois PAR couche :

- GROUND : la Sous-Couche "sol", en dessous de WORLD. Sert à stocker les objets qui doivent TOUJOURS être en dessous (ex : flaques, trous, cadavres, etc.).
- WORLD : la Sous-Couche du "monde" où se trouvent tous les objets, les murs, les NPC, etc. Contient 95% des objets.
- LIGHT : la Sous-Couche "lumière" ou "éclairage", au-dessus de WORLD. Contient les objets toujours au-dessus (ex : ombres, lumières, etc.).

Note : si vous avez un doute, préférez WORLD, les autres Sous-couches étant situationnelles.

Attention ! La "carte" (ici, dans le sens "sol") se trouve sur la Sous-Couche GROUND : ajouter un objet sur cette Sous-Couche avec un Index BACK créera l'objet DERRIÈRE LE "SOL" ; il sera donc invisible (ce qui n'est probablement pas le résultat souhaité…).