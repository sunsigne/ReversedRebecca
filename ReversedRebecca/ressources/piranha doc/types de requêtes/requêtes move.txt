La plupart des Types de Requête suivants font intervenir le Path Finder, qui, malgré son optimisation, est assez gourmand en puissance de calcul. Ce dernier consomme une puissance de calcul amplifiée lorsque aucune trajectoire n'est trouvée, ce qui – dans un monde parfait – ne devrait arriver que lorsque le joueur – seule variable non contrôlable sur une carte – bloque le chemin de l'objet. Il est du devoir du programmeur Piranha de prendre en compte la présence hypothétique du joueur et d’empêcher les calculs de trajectoires inutiles qui n'aboutiront pas, par exemple en vérifiant que celui-ci est suffisamment loin (exemple : … WAITFOR → PLAYER_FUTHER_THAN:2 ? … – voir « WAITFOR » dans la partie « Piranha – Types de Requêtes : Autres » –), en privilégiant le Type de Requête MOVE_BACKUP (voir pages suivantes) lorsqu'une trajectoire doit absolument être trouvée, ou en changeant le Player Avoider de l'objet (voir « PLAYER_AVOIDER_TYPE » dans la partie « Piranha – Types de Requêtes : States ») pour en choisir un qui ignore le joueur lors du calcul de la trajectoire (exemple : « STOP », dans les espaces étroits).

Attention ! À part la vitesse de base du joueur qui est modifiée, les mouvements durant les cinématiques (voir « CUTSCENE » dans la partie « Piranha – Types de Requêtes : Autres ») suivent les mêmes règles qu'en dehors de ces dernières. Assurez-vous qu'aucun NPC ne soit pas bloqué par le joueur, au risque de provoquer un « softlock ».



////// MOVE //////

Le Type de Requête MOVE permet de définir un Goal (ou Objectif) pour un objet. Si le Goal est atteignable et que l'objet peut se déplacer, il se déplacera dans sa direction.

Exemple :
TIME -> 0 = MOVE -> 10-20
TIME -> 0 = GOTO -> MOVE:10-20

Lorsque la Condition sera vérifiée, l'objet cherchera à se rendre en X=10 Y=20.

Note : la Cible « STOP » est autorisé, l'objet sera alors immobilisé, recentré sur sa propre case, et son nouveau Goal sera défini comme étant « null ».
Une façon alternative d'écrire ce Type de Requête tout en anticipant l'Instruction dont la Condition coïncide à sa Cible (voir « GOAL » dans la partie « Piranha – Conditions »), est de passer par un WAITFOR (voir « WAITFOR » dans la partie « Piranha – Types de Requêtes : Autres »).

Exemple :
! -> MOVE_TO_A = MOVE -> 10-20
GOAL -> 10-20 -> FACING:UP, AFFECTING:REACHED_A

… peut être simplifié de la façon suivante :
! -> MOVE_TO_A = WAITFOR -> MOVE:10-20 ? AFFECTING:REACHED_A


Utilisation "spéciale" :

Il est possible de définir un Goal à partir d'un nom (voir « NAME » dans la partie « Piranha – Types de Requêtes : Autres »). Dans ce cas, le Goal sera défini comme étant la Position valide la plus proche parmi les quatre emplacements autours de l'objet.

Exemple :
TIME -> 20 = MOVE -> PLAYER

Lorsque la Condition sera vérifiée, l'objet se rendra "à-côté" du joueur. L'endroit exact sera déterminé en fonction de la distance "à vol d'oiseau" la plus courte.

Attention ! le Goal est défini au moment du lancement de la Requête et n'est pas recalculé durant le trajet ! Dit autrement ; si le joueur s'est déplacé pendant le mouvement de l'objet, ce dernier ne changera pas sa destination : il arrivera là où le joueur était, et non là où il se trouve nouvellement.

Note : Il est tout à fait possible de corriger ce comportement en créant une boucle, comme dans cet exemple :

$ -> START_FOLLOWING = GOTO -> PLAYER_AVOIDER_TYPE:THROUGH, WAITFOR_STUN:FALSE, FOLLOW_PLAYER
$ -> FOLLOW_PLAYER = WAITFOR -> TIMER:1 ? PARSE_PLAYER_FAR, PARSE_PLAYER_CLOSE, FOLLOW_PLAYER
$ -> PARSE_PLAYER_FAR = PLAYER_FUTHER_THAN -> 2 ? MOVE:PLAYER / NULL
$ -> PARSE_PLAYER_CLOSE = PLAYER_CLOSER_THAN -> 3 ? FACING:PLAYER / NULL

Explication : ici, la Position exacte du joueur sera recalculée toutes les secondes. S'il est à proximité, l'objet se tournera vers lui mais ne bougera pas afin de conserver une distance « socialement acceptable ». Si en revanche le joueur s’éloigne, l'objet le suivra.

Note : L'écriture du Type de Condition GOAL ne peut pas s'adapter à l'utilisation "spéciale" du Type de Requête MOVE. Dit autrement, il est impossible de vérifier une Condition du genre « GOAL → PLAYER » ; il faudra "ruser" afin de vérifier l'arrivée de votre objet, par exemple de la façon suivante :

TIME -> 20 = GOTO -> SLOW:PLAYER, WAITFOR_REACHED_PLAYER
$ -> WAITFOR_REACHED_PLAYER = WAITFOR -> PLAYER_CLOSER_THAN:3 ? WAITFOR_REAL_ARRIVING
$ -> WAITFOR_REAL_ARRIVING = WAITFOR -> TIMER:1 ? YOUR_ACTION

Dans cet exemple, la balise GOTO « YOUR_ACTION » sera déclenché à peu près au moment où l'objet arrivera devant le joueur, grâce à une vérification de proximité avec celui-ci, couplé à un court délai.



////// SLOW //////

Le Type de Requête SLOW a exactement le même effet et est soumis aux mêmes règles que Type de Requête MOVE.

La seule différence avec ce dernier est que SLOW demande en plus à l'objet d'effectuer son déplacement de façon lente.



////// FAST //////

Le Type de Requête SLOW a exactement le même effet et est soumis aux mêmes règles que Type de Requête MOVE.

La seule différence avec ce dernier est que SLOW demande en plus à l'objet d'effectuer son déplacement de façon rapide.



////// MOVE_BACKUP //////

Le Type de Requête MOVE_BACKUP permet de définir deux Goals à un objet. L'objet cherchera à se rendre au premier Goal accessible. Le calcul de la trajectoire se met constamment à jour, jusqu'à arrivée à destination à l'un ou l'autre des Objectifs.

Exemple :
TIME -> 0 = MOVE_BACKUP -> 10-20, 11-19

Lorsque la Condition sera vérifiée, l'objet cherchera à se rendre en X=10 Y=20.
Si cette Position devient inatteignable – par exemple, à cause de la présence du joueur à cet endroit –, l'objet cherchera aussitôt et à la place à se rendre en X=11 Y=19. Si cette nouvelle Position devient inatteignable, l'objet cherchera de nouveau à se rendre en X=10 Y=20.

ATTENTION ! Afin de définir quel Goal est atteignable, une Instruction cachée dont le Type de Requête est WAITFOR s'effectue tout au long du trajet, il faut donc faire attention à ne pas écraser par accident un WAITFOR précédent (voir « WAITFOR » dans la partie « Piranha – Types de Requêtes : Autres »).

Attention ! Il est nécessaire d'utiliser MOVE pour les grands trajets, avant d'éventuellement affiner l'arrivée avec MOVE_BACKUP. La raison à cette règle est double : le trajet avec MOVE_BACKUP n'est pas trouvé lorsqu’il fait intervenir des Path Point (voir le fichier "mappable.txt" dans le dossier "maps"), c.-à-d. lorsque le chemin est plus complexe qu'une ligne droite ou qu'un simple coude, et la puissance de calcul nécessaire au bon fonctionnement de MOVE_BACKUP est deux fois celle de MOVE.

Note : il existe également les Types de Requête SLOW_BACKUP et FAST_BACKUP dont vous devinerez aisément les fonctionnements.



////// TP //////

Le Type de Requête TP téléporte un objet aux coordonnées X et Y indiquées.

Exemple :
TIME -> 0 = TP -> 10-20
TIME -> 0 = GOTO -> TP:10-20

Lorsque la Condition sera vérifiée, l'objet sera téléporté en X=10 Y=20.

À l'instar du Type de Requête MOVE, il est possible de définir une Position à partir d'un nom. L'objet se téléportera alors à une Position valide parmi les quatre emplacements autours de l'objet.

Note : si la Cible est PLAYER, il est recommandé de s'assurer que le joueur est centré au moment de l'exécution de la Requête afin d'obtenir un résultat "propre", par exemple en lançant une cinématique (voir « CUTSCENE » dans la partie « Piranha – Types de Requêtes : Autres ») ou en en faisant explicitement la demande (voir « CENTER_PLAYER » dans la partie « Piranha – Types de Requêtes : Player »).



////// PUSH //////

Le Type de Requête PUSH pousse un objet dans la direction définie en Cible.

La direction indiquée peut prendre comme valeur « LEFT », « RIGHT », « UP » ou « DOWN ».

Exemple :
! -> PUSH_PLAYER_UP = PUSH -> UP
! -> PUSH_PLAYER_UP = GOTO -> PUSH:UP

Lorsque la Condition sera vérifiée, l'objet sera poussé vers le haut.

Rappel : lorsqu'un objet est poussé, il est « stun » (c.-à.d. perte des contrôles). Aussitôt qu'est appelée une Instruction dont le Type de Requête est WAITFOR, l'objet est automatiquement « dé-stun », ce qui a pour effet de l'immobiliser ; donc d'annuler la poussée. Il ne faut pas appeler le Type de Requête WAITFOR juste après avoir utilisé le Type de Requête PUSH ! L'inverse reste possible.

Pour le dire plus simplement, n'écrivez pas :
TIME -> 0 = GOTO -> PUSH:UP, WAITING_BEFORE_STUFF

Écrivez à la place :
TIME -> 0 = GOTO -> WAITING_BEFORE_STUFF, PUSH:UP
