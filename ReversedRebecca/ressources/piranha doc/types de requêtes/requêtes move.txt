Attention : à part la vitesse de base du joueur qui est modifiée, les mouvements durant les cutscene suivent les mêmes règles que hors de ces dernières. Si un personnage est bloqué, car le joueur est considéré comme étant "trop près", effectuez une requête PLAYER_AVOIDER_TYPE:CUTSCENE (voir "requêtes states").
Note : la plupart des Types de Requête suivants font intervenir un PathFinder qui, malgré son optimisation, est assez gourmand en ressources... Ce dernier le devient énormémant lorsque aucune trajectoire n'est trouvée (par exemple, lorsque le joueur bloque le chemin). Il est du devoir du programmeur Piranha de faire en sorte que cela arrive le moins souvent possible en empêchant le calcul de trajectoire lorsque cela n'est pas désiré, par exemple en utilisant un "WAITFOR -> PLAYER_FUTHER_THAN:2 ?" (voir "requêtes autres"), en privilegiant le Type de Requête MOVE_BACKUP (voir plus bas) qui est moins gourmand si un chemin est trouvé, que MOVE lorsque aucun ne l'est, ou en changeant le PLAYER_AVOIDER_TYPE (voir "requêtes states") pour en choisir un qui ignore le joueur lors du calcul de la trajectoire (par exemple "STOP", dans les espaces étroits).

////// MOVE //////


Le Type de Requête MOVE permet définir un GOAL à un objet. Si le GOAL est atteignable et que l'objet peut se déplacer, il se déplacera dans sa direction.

exemple :
TIME -> 0 = MOVE -> 33-35
TIME -> 0 = GOTO -> MOVE:33-35

Lorsque la Condition sera vérifiée, l'objet cherchera à se rendre en x=33 y=35
Note : la Cible "STOP" est autorisé. Le nouveau GOAL se l'objet sera alors défini comme null. Ni le NAME d'un objet, ni la Cible "Player" ne sont autorisés pour ce Type de Requête.


////// SLOW //////


Même chose que pour MOVE, mais demande en plus à l'objet de se déplacer lentement.


////// FAST //////


Même principe, mais rapidement.


////// MOVE_BACKUP //////

Le Type de Requête MOVE_BACKUP permet de définir deux GOAL à un objet. Le GOAL visé sera celui atteignable par la cible.

exemple :
TIME -> 0 = MOVE_BACKUP -> 14-7, 15-6

Lorsque la Condition sera vérifiée, l'objet cherchera à se rendre en x=14 y=7.
Aussitôt que ce chemin sera considéré comme "bloqué", l'objet cherchera à se rendre en x=15 y=6 à la place.
Aussitôt que ce chemin sera considéré comme "bloqué", l'objet cherchera à se rendre de nouveau en x=14 y=7.
Etc.

Attention ! Afin de définir quel goal est atteignable, une Instruction cachée dont le Type de Requête est WAITFOR s'effectue tout au long du trajet, il faut donc faire attention à ne pas écraser par accident un WAITFOR précédent (voir "requêtes autres").
Note : pour des raisons que vous comprendrez, ce Type de Requête est deux fois plus gourmand en ressource que le Type de Requête MOVE. Il vaut mieux donc se servir de MOVE pour les grands trajets, puis affiner l'arrivée avec MOVE_BACKUP.

Note : vous pouvez en deviner leurs fonctionnements, aussi, nous ne les détaillerons pas, mais il existe également les Types de Requête SLOW_BACKUP et FAST_BACKUP.


////// TP //////

Le Type de Requête TP téléporte un objet aux coordonnées indiquées.

exemple :
TIME -> 0 = TP -> 33-35
TIME -> 0 = GOTO -> TP:33-35

Lorsque la Condition sera vérifiée, l'objet se téléportera en x=33 y=35.


////// PUSH //////

Le Type de Requête PUSH pousse un objet dans la direction définie en Cible. Il faut bien entendu que cet objet puisse être poussé (donc être vivant).

exemple :
! -> PUSH_PLAYER_UP = PUSH -> UP
! -> PUSH_PLAYER_UP = GOTO -> PUSH:UP

Lorsque la Condition sera vérifiée, l'objet sera poussé vers le haut.

Attention ! Aussitôt qu'est appelée une Instruction dont le Type de Requête est WAITFOR, l'objet est automatiquement "dé-stun"; et donc immobilisé pendant 1 frame. Il faut donc éviter d'appeler le Type de Requête WAITFOR juste après avoir utilisé le Type de Requête PUSH, qui serait instantanément annulé.

Pour le dire plus simplement, n'écrivez pas :
TIME -> 0 = GOTO -> PUSH:UP, WAITING_BEFORE_STUFF
$ -> WAITING_BEFORE_STUFF = WAITFOR -> TIMER:1 ? DO_STUFF

Écrivez à la place :
TIME -> 0 = GOTO -> WAITING_BEFORE_STUFF, PUSH:UP
$ -> WAITING_BEFORE_STUFF = WAITFOR -> TIMER:1 ? DO_STUFF