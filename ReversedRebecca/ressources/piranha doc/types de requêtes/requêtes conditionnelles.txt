Les Types de requêtes suivants sont purement conditionnels. C'est-à-dire que contrairement aux Types de Requêtes "classiques", ils ne peuvent pas être utilisés autrement qu'avec une écriture conditionnelle.

////// DIFFICULTY //////

Le Type de Requête DIFFICULTY permet de vérifier le mode de difficulté actuel.

Les modes de difficulté est établi par le joueur lors de la création d'une nouvelle partie. Il peut prendre trois valeurs différentes :
- EASY
- NORMAL
- HARD

exemple :
TIME -> 0 = DIFFICULTY -> EASY ? EASY_BOSS_IA / NORMAL_OR_HARD_BOSS_IA

Lorsque la Condition sera vérifiée, une nouvelle condition doit être vérifiée : la difficulté est-elle définie comme étant sur "EASY" (facile) ?
- si oui, effectuer l'action EASY_BOSS_IA (qui est une balise comme pour GOTO)
- si non, effectuer l'action NORMAL_OR_HARD_BOSS_IA (qui est une autre balise comme pour GOTO)


////// SEE //////

Le Type de Requête SEE permet de savoir si un objet a ou non dans son champ de vision un autre objet (en utilisant son NAME comme Cible).
Le champ de vision est valide lorsqu'une ligne droite peut être tracée entre deux objets, et que cette ligne ne rencontre aucun obstacle défini comme "opaque" : une porte et un mur sont opaques, les objets et personnages Piranha ne le sont pas par défaut (cela peut être modifié en utilisant le Type de Requête BLOCKING_SIGHT, voir "requêtes state").

exemple :
TIME -> 0 = SEE -> PLAYER ? GOCRYING / MOVE:37-42

Lorsque la Condition sera vérifiée, une nouvelle condition doit être vérifiée : le joueur est-il dans le champ de vision de l'objet ?
- si oui, effectuer l'action GOCRYING (qui est une balise comme pour GOTO)
- si non, définir le GOAL comme étant en x=37 y=42


////// PLAYER_FUTHER_THAN //////

Le Type de Requête PLAYER_FUTHER_THAN permet de savoir le joueur est plus loin de l'objet actuel que le nombre de cases définies par la Cible.

exemple :
TIME -> 0 = PLAYER_FUTHER_THAN -> 6 ? GOCRYING / MOVE:37-42

Lorsque la Condition sera vérifiée, une nouvelle condition doit être vérifiée : le joueur est-il plus loin que 6 cases ?
- si oui, effectuer l'action GOCRYING (qui est une balise comme pour GOTO)
- si non, définir le GOAL comme étant en x=37 y=42


////// PLAYER_CLOSER_THAN //////

Le Type de Requête PLAYER_CLOSER_THAN fonctionne exactement de la même façon que le Type de Requête PLAYER_FUTHER_THAN, à la différence près qu'il vérifie si le joueur est "plus prêt" au lieu de "plus loin".


////// STUNNED //////

Le Type de Requête STUNNED permet de savoir si un objet est considéré comme "stun" ou non (en utilisant son NAME comme Cible).
Note : même s'il peut encore interagir, un objet est considéré comme "stun" si sa Condition lui interdit de bouger (voir CONDITION dans "requête state").

exemple :
TIME -> 0 = GOTO -> PARSE_READY_PLAYER_DISPUTE
$ -> PARSE_READY_PLAYER_DISPUTE = STUNNED -> PLAYER ? WAITING_BEFORE_START_DISPUTE / START_DISPUTE
$ -> WAITING_BEFORE_START_DISPUTE = WAITFOR -> TIMER:1 ? PARSE_READY_PLAYER_DISPUTE

Lorsque la Condition sera vérifiée, une nouvelle condition doit être vérifiée : le joueur est-il stun ?
- si oui, effectuer l'action WAITING_BEFORE_START_DISPUTE (qui est une balise comme pour GOTO)
- si non, effectuer l'action START_DISPUTE (qui est une balise comme pour GOTO)
Note : dans notre exemple la 3ème Instruction forme une boucle avec la seconde, de cette façon l'action START_DISPUTE s'effectuera lorsque le joueur ne sera plus stun (puisque cette boucle-ci implique que la condition soit vérifiée chaque seconde jusqu'à ce qu'elle soit validée).


////// CHOOSING //////

Le Type de Requête CHOOSING permet de savoir si le joueur est en train d'effectuer ou non un choix (voir type de reqête CHOICE dans "requêtes actions".
Cela peut nottament avoir un intérêt lors du déclanchement de certain évênements.

exemple :
TIME -> 100 = GOTO -> TRY_ARRIVING
$ -> TRY_ARRIVING = CHOOSING -> TRUE ? WAITING_BEFORE_ARRIVING / ARRIVE_NOW
$ -> WAITING_BEFORE_ARRIVING = WAITFOR -> TIMER:1 ? TRY_ARRIVING

Lorsque la Condition sera vérifiée, une nouvelle condition doit être vérifiée : le joueur est-il en train d'effectuer un choix ?
- si oui, effectuer l'action WAITING_BEFORE_ARRIVING (qui est une balise comme pour GOTO)
- si non, effectuer l'action ARRIVE_NOW (qui est une balise comme pour GOTO)
Note : dans notre exemple la 3ème Instruction forme une boucle avec la seconde, de cette façon l'action ARRIVE_NOW s'effectuera lorsque le joueur ne sera plus face à un choix (puisque cette boucle-ci implique que la condition soit vérifiée chaque seconde jusqu'à ce qu'elle soit validée).


////// READY_PLAYER //////

Le Type de Requête READY_PLAYER permet de savoir si le joueur est "prêt" ou non. Ce Type de Requête est très utile avant de lancer une cinématique (voir CUTSCENE dans "requêtes autres").

Le joueur est considéré comme "prêt" s'il respecte 4 conditions :
- il est présent sur la carte.
- il n'est pas "stun" (voir STUNNED au dessus)
- il n'est pas en train d'effectuer un choix (voir CHOOSING au-dessus)
- une cinématique n'est pas en cours.

exemple :
TIME -> 100 = GOTO -> TRY_ARRIVING
$ -> TRY_ARRIVING = READY_PLAYER -> FALSE ? WAITING_BEFORE_ARRIVING / ARRIVE_NOW
$ -> WAITING_BEFORE_ARRIVING = WAITFOR -> TIMER:1 ? TRY_ARRIVING

Lorsque la Condition sera vérifiée, une nouvelle condition doit être vérifiée : le joueur est-il "prêt" ?
- si non, effectuer l'action WAITING_BEFORE_ARRIVING (qui est une balise comme pour GOTO)
- si oui, effectuer l'action ARRIVE_NOW (qui est une balise comme pour GOTO)
Note : dans notre exemple la 3ème Instruction forme une boucle avec la seconde, de cette façon l'action ARRIVE_NOW s'effectuera lorsque le joueur sera prêt (puisque cette boucle-ci implique que la condition soit vérifiée chaque seconde jusqu'à ce qu'elle soit validée).


