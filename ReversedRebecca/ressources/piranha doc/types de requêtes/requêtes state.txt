Sauf mention contraire, L'Écriture Conditionnelle (voir la partie « Pirana – Écriture Conditionnelle ») est possible pour tous les Types de Requête suivants.



////// NAME //////

Le Type de Requête NAME permet de renommer un objet.

Attention ! Un nom est l'équivalent d'une ID : deux objets différents sur une même carte ne devraient jamais avoir le même.

Il est très courant d'utiliser ce Type de Requête juste après la génération d'une carte afin d'établir le nom et d'appliquer les bonnes textures des NPC. En effet, pour les NPC, leurs visuels sont automatiquement définis en fonction de ce nom. Pour les objets interactifs, ce sont les fichiers de références de leurs ERA sous forme de détourage visuel qui sont changés (voir « HIGHLIGHT » et « HIGHLIGHT_REFRESH » dans la partie « Piranha – Type de Requêtes : Autres »).

Exemple :
TIME -> 0 = NAME -> BOB
TIME -> 0 = GOTO -> NAME:BOB

Lorsque la Condition sera vérifiée, l'objet sera renommé en « Bob ».

Note : il est tout à fait possible (voire, très pratique) d'utiliser NAME alternativement de façon "classique" et Conditionnelle afin d'imiter le comportement du Type de Requête MEMORY (voir la partie « Piranha – Type de Requêtes : Memory »).

Rappel : au besoin, les mots clés « PLAYER » ou « OBJECT » peuvent être utilisés pour faire référence respectivement au joueur ou à l'objet actuel.



////// TEXTURE_NAME //////

Le Type de Requête TEXTURE_NAME permet de changer le visuel des NPC, en définissant pour leurs textures des fichiers de référence explicitement différents de leurs noms (NAME).

Ce type de Requête est utile de façon situationnelle, lorsque plusieurs NPC utilise la même texture.

Exemple :
TIME -> 0 = TEXTURE_NAME -> POLICEMAN
TIME -> 0 = GOTO -> TEXTURE_NAME:POLICEMAN

Lorsque la Condition sera vérifiée, l'objet adotera la texture « POLICEMAN », sans changer de nom.

Rappel : un nom est l'équivalent d'une ID : deux objets différents sur une même carte ne devraient jamais avoir le même.



////// FACING //////

Le Type de Requête FACING permet de changer l'orientation d'un objet.

Exemple :
TIME -> 0 = FACING -> RIGHT
TIME -> 0 = GOTO -> FACING:RIGHT

Lorsque la Condition sera vérifiée, l'objet "regardera" à droite.

Il est tout à fait possible, au lieu d'écrire une direction, d'écrire le nom d'un autre objet. Le Path Finder se chargera alors de déterminer la direction vers laquelle l'objet doit "regarder".

Exemple :
TALKED -> COMPUTER = FACING -> BOB

À la fin du dialogue « COMPUTER », l'objet se tournera vers Bob.

Attention ! Si aucun chemin n'est trouvé par le Path Finder, l'objet conservera son orientation actuelle.

Attention ! Il est facile de se tromper : c'est l'orientation de l'objet dans lequel est écrite cette Instruction qui change ! Si l'on souhaite changer l'orientation du joueur ou d'un autre NPC, c'est dans LEURS fichiers Piranha qu'il faut le faire – ou utiliser le Type de Requête FACING_PLAYER (voir la partie « Piranha – Types de Requête : Player ») –.



////// WAITFOR_STUN //////

Le Type de Requête WAITFOR_STUN permet de changer une propriété très spécifique d'un objet. Avant de la détailler, sachez que ce Type de Requête vous sera inutile 99.9 % du temps !

Contexte : lorsqu'un objet se voit attribuer un WAITFOR (voir « WAITFOR » dans la partie « Piranha – Types de Requête : Autres »), il est « stun » pendant un court instant (voir « STUNNED » dans la partie « Piranha – Type de Requêtes : Conditionnelles »). Ce court « stun » assure la cohérence du code et prévient certains bugs, mais a pour conséquence d'immobiliser l'objet sur place (toujours durant un court instant). Il peut exister certaines situations extrêmement spécifiques où l'on souhaite désactiver temporairement cette propriété "d'immobilisation", c'est là que le Type de Requête WAITFOR_STUN intervient.

Exemple :
TIME -> 0 = WAITFOR_STUN -> FALSE
TIME -> 0 = GOTO -> WAITFOR_STUN:FALSE

Lorsque la Condition sera vérifiée, l'objet ne sera plus « stun » au moment de l'attribution d'un WAITFOR.

Exemple de situation :
Une boucle WAITFOR astucieuse permet à un objet de suivre les déplacements joueur (voir « MOVE » dans la partie « Piranha – Types de Requête : Move »). Cette boucle se lançant à intervalles réguliers va donc "immobiliser" l'objet à chaque itération, ce qui rendra le mouvement saccadé… En désactivant la propriété WAITFOR_STUN de l'objet, nous nous assurons de conserver un mouvement fluide !

Attention ! Par défaut, WAITFOR_STUN est défini sur « TRUE » et doit le rester le plus souvent possible : un WAITFOR_STUN activé permet de se prémunir de certains bugs.



////// BLOCKING_PATH //////

Le Type de Requête BLOCKING_PATH permet de changer la propriété "bloquante" d'un objet : un objet non-bloquant est un objet à travers lequel on peut passer (ex : une flaque).

Note : changer cette propriété change également les chemins valides trouvés par le Path Finder.

Exemple :
TIME -> 0 = BLOCKING_PATH -> FALSE
TIME -> 0 = GOTO -> BLOCKING_PATH:FALSE

Lorsque la Condition sera vérifiée, l'objet sera franchissable.

Note : par défaut, les objets Piranha sont bloquants.



////// BLOCKING_SIGHT //////

Le Type de Requête BLOCKING_SIGHT permet de changer la propriété "opaque" d'un objet : un objet opaque est un objet à travers lequel on ne peut pas voir (ex : un distributeur de boissons).

Note : changer cette propriété change le « champ de vision » d'un objet, ce qui n'est utile que de façon très situationnelle (voir « SEE » dans la partie « Piranha – Types de Requête : Conditionnelles »).

Exemple :
TIME -> 0 = BLOCKING_SIGHT -> TRUE
TIME -> 0 = GOTO -> BLOCKING_SIGHT:TRUE

Lorsque la Condition sera vérifiée, l'objet sera opaque.

Note : par défaut, les objets Piranha sont "non opaques". Dit autrement, par défaut, on voit au travers. En effet, Les objets Piranha incarnent le plus souvent du mobilier. Or, une plante, une table basse, un bureau, etc. ne cachent presque jamais la vision sur une personne se trouvant de l'autre côté !



////// HITBOX //////

Le Type de Requête HITBOX permet de changer les dimensions de la Hitbox d'un objet (c.-à-d. la zone dans laquelle les autres objets sont considérés comme étant en contact avec celui-ci). L'intérêt principal de ce Type de Requête est de rendre "propre" le chemin que peut emprunter le joueur, en sens où il est cohérent avec ce qu'il voit.

L'Écriture Conditionnelle n'est possible pour ce Type de Requête.

Ce Type de Requête requiert quatre Cibles : une Position horizontale par rapport à l'objet (X), une Position verticale par rapport à l'objet (Y), une largeur (width) et une hauteur (height).

L'échelle est de seize pixels pour une case. Il est possible d'écrire des Cibles à valeurs négatives où qui dépassent les dimensions d'origines.

Exemple :
TIME -> 0 = HITBOX -> 8, 0, 8, 16

Lorsque la Condition sera vérifiée, l'objet aura une Hitbox par rapport à l'objet, définie comme suit : X=8, Y=0, largeur=8, hauteur=16.

Explication : ci-dessous, un schéma illustratif. À gauche, la Hitbox d'origine. À droite, la nouvelle Hitbox de l'objet :

XX	OX
XX	OX

Les quatre lettres représentent une case en tout. En imaginant que l'objet est "bloquant" (voir « BLOKING_PATH » dans les pages précédentes), les X représentent une zone infranchissable, et les O, un endroit où le joueur peut se trouver.

Attention ! Changer les dimensions de la Hitbox n'influence aucun autre facteur que celui su-cité. Ni les chemins valides du Path Finder – même avec une Hitbox réduite à 0 –, ni la Position officielle de l'objet, ni les règles qui définissent si un objet est "à portée d'actions", ni son visuel, etc. ne sont modifiées. Il est donc fortement déconseillé d'utiliser cette propriété pour créer des objets "à deux cases".

Rappel : lors de la phase de développement, afin de "visualiser" les Hitbox, il faut utiliser le Debug Mode (voir le fichier "debugmod.txt").



////// INVULNERABLE //////

Le Type de Requête INVULNERABLE permet de changer la propriété "vulnérable" de l'objet actuel : un objet vulnérable est un objet pouvant perdre des points de vie (PV).

Exemple :
TIME -> 0 = INVULNERABLE -> TRUE
TIME -> 0 = GOTO -> INVULNERABLE:TRUE

Lorsque la Condition sera vérifiée, l'objet deviendra invulnérable.

Note : par défaut, les objets vivants sont vulnérables.

Note : lorsque le joueur est invulnérable, ses PV ne sont plus affichés dans la HUD.



////// CONDITION //////


Le Type de Requête CONDITION, contrairement à ce que son nom laisse penser, n'a aucun lien avec l'Écriture Conditionnelle : il permet de changer la condition – dans le sens « état physique » – (voir « Conditions » dans la partie « NPC ») d'un objet, ce qui modifie à la fois le visuel d'un NPC et son comportement.

Les différentes conditions existantes sont les suivantes :
- GOOD : condition par défaut.
- GLASS : le NPC tient un verre d'eau.
- CUP : le NPC tient un gobelet.
- SICK : le NPC a l'air malade.
- BATH : seule la tête du NPC est visible. Il a l'air de dormir et ne peut plus bouger (mais peut toujours interagir !)
- BED : le NPC dort et ne peut plus bouger (mais peut toujours interagir !)
- CRY : le NPC pleure et ne peut plus bouger (mais peut toujours interagir !)
- RELAX : le NPC est allongé et ne peut plus bouger (mais peut toujours interagir !)
- SIT : le NPC est assis et ne peut plus bouger (mais peut toujours interagir !)
- KO : le NPC est allongé et ne peut plus rien faire.

Exemple :
TIME -> 0 = CONDITION -> GOOD
TIME -> 0 = GOTO -> CONDITION:GOOD

Lorsque la Condition sera vérifiée, l'objet adoptera la condition « GOOD ».



////// PLAYER_AVOIDER_TYPE //////

Attention ! Ce Type de Requête N'EST PAS de Type Player (voir la partie « Piranha – Types de Requête : Player ») : ces derniers ont le mot « PLAYER » en fin de nom, et non en début.

Le Type de Requête PLAYER_AVOIDER_TYPE permet de changer le « type d'évitement » (voir pages suivantes) d'un NPC à l'égard du joueur.

Exemple :
TIME -> 0 = PLAYER_AVOIDER_TYPE -> AROUND
TIME -> 0 = GOTO -> PLAYER_AVOIDER_TYPE:AROUND

Lorsque la Condition sera vérifiée, l'objet adoptera le type d'évitement « AROUND » (qui est celui attribué par défaut).


Les types d'évitements existants et leurs fonctionnements sont les suivants :

- AROUND : l'un des trois types d'évitement avec AROUND_OMNISCIENT et CUTSCENE où le joueur est compté comme un obstacle pour le Path Finder : le NPC va tenter de le contourner. S'il ne peut pas, il se rapprochera à distance suffisante et attendra que ce dernier se décale. Dans le cas où le NPC est "en plein mouvement entre deux cases" et qu'une collision survient avec le joueur, il fera "glisser" ce dernier (à la façon du type d'évitement FORCE) afin de finir son mouvement jusqu'à une case entière.
- AROUND_OMNISCIENT : a le même fonctionnement que AROUND à ceci près qu'avec AROUND, le joueur n'est compté comme un obstacle que lorsqu'il est suffisamment proche (cinq cases ou moins). Ce procédé est très efficace pour éviter que les NPC ne "devinent" qu'ils ne peuvent pas atteindre leurs Objectifs et ne s'arrêtent sur place à cause du joueur – alors que celui-ci est très loin, voir dans une autre pièce –. Cependant, dans les lieux étroits à grande visibilité (ex : longs couloirs, grandes salles pleines d'obstacles, etc.), la limitation de distance de AROUND peut générer des comportements indésirables "d'allers-retours infinis". AROUND_OMNISCIENT permet de pallier ce problème en supprimant cette limitation : le joueur EST un obstacle, où qu'il se trouve.
- CUTSCENE : a le même fonctionnement que AROUND à ceci près que AROUND semble plus "naturelle" lors des phases de "Gameplay". Avec AROUND, les NPC ne tentent pas de se déplacer si le joueur est trop près, car ce dernier est la plupart du temps en mouvement, de façon imprévisible, et qu'un risque de collision est fort : ils "attendent d'avoir plus de place" pour passer. Lors des cinématiques (voir « CUTSCENE » dans la partie « Piranha – Types de Requête : Autres »), le joueur est la plupart du temps statique et proche des NPC : ces derniers ont plus de liberté de mouvement et n’attentent pas que le joueur soit loin pour se déplacer.

Attention ! le Player Avoider ne change pas "tout seul" lors des cinématiques : il reste le même que celui qu'on a défini en dernier. Cependant, une sécurité dans le code Java s'assure que les spécificités d'arrêts de AROUND et de STOP (joueur trop proche) sont ignorées lors des cinématiques, afin de réduire les chances de « softlock ».

Dans tous les cas suivants, le Path Finder va ignorer l'existence du joueur dans le calcul du trajet d'un NPC vers son Objectif. C'est la réaction face à une collision avec le joueur qui change :

- FORCE : le NPC va "forcer le passage" en avançant comme si le joueur n'était pas là. Le joueur sera poussé dans le sens de la marche. (Attention, ce mouvement ne semble pas "naturel", mais certaines situations ne peuvent parfois pas être gérées autrement).
- THROUGH : le NPC va ignorer purement et simplement le joueur comme s'il était un fantôme, et lui passer au travers ! (Cela peut être utile lors de cinématiques).
- STOP : le NPC va s'arrêter net et attendre que le joueur s'en aille, en suivant du regard ce dernier, avant de reprendre son chemin. 
- PUSH : le NPC va pousser le joueur en face de lui. Aucune pause n'est marquée.
- PUSH_DIRECTION (remplacer "DIRECTION" par "LEFT", "RIGHT", "UP" ou "DOWN") : le NPC va pousser le joueur dans la direction indiquée. Aucune pause n'est marquée.
- PUSH_HURT : le NPC va pousser le joueur en face de lui et lui retirer de la vie. Le NPC marquera une "courte pause" (en se figeant sur place) après cette action.

Note : si le PLAYER_AVOIDER_TYPE est défini par défaut sur AROUND, il ne faut pas hésiter à le mettre sur STOP ou CUTSCENE dans les espaces étroits afin de ne pas avoir des lags à cause du Path Finder qui ne trouve pas de chemin valide.

Note : En ce qui concerne les comportements de PUSH, il est important de noter que le jeu dispose d'une sécurité pour éviter un paradoxe : si l'objet Piranha cherche à pousser un autre objet dans la direction qu'il bloque lui-même avec sa propre Hitbox (c-.à-d. s'il tente de pousser un objet "vers lui-même"), il le poussera à la place dans la direction opposée.
