////// CAMERA //////


Le Type de Requête CAMERA permet de déterminer l'emplacement de la Caméra.

exemple :
TIME -> 0 = CAMERA -> 0-0
TIME -> 0 = GOTO -> CAMERA:0-0

Lorsque la Condition sera vérifiée, la Caméra se placera en x=0 y=0.

Note : il est tout à fait autorisé d'entrer "PLAYER" comme Cible à la place de coordonnées afin de demander à la Caméra suivre ce dernier.
Note : le comportement par défaut de la Caméra n'est pas de suivre le joueur, mais de se placer en 0-0. Il faudra donc configurer le fichier SET-UP à chaque fois.


////// CUTSCENE //////


Le Type de Requête CUTSCENE permet de lancer ou d'arrêter une scène cinématique.

exemple :
TIME -> 0 = CUTSCENE -> START
TIME -> 0 = GOTO -> CUTSCENE:START

Lorsque la Condition sera vérifiée, une scène cinématique sera lancée.

Les deux "seules choses" que font une scène cinématique sont :
- d'afficher des bandes noires en haut et en bas de l'écran.
- d'interdire à l'utilisateur de contrôler le joueur avec le clavier.

Le Type de Requête CUTSCENE accepte 3 cibles :
- START, pour lancer une scène cinématique.
- STOP, pour arrêter une scène cinématique.
- STOP_WITH_DELAY, pour arrêter une scène cinématique après un court délais (1 secondes). On ne sait jamais, ça peut servir ¯\_(ツ)_/¯

Attention ! Assurez-vous toujours qu'une cinématique ait une fin ! Sans quoi l'utilisateur ne pourra pas reprendre le contrôle du joueur.


////// WAITFOR //////


Le Type de Requête WAITFOR est à la fois l'un des plus utiles et le plus compliqué à utiliser correctement !
Il accepte exactement 2 Cibles. La première permet de définir une Condition (en plus de la Condition de l'Instruction), la seconde est la Requête à exécuter lorsque la condition est vérifiée.
Note : la seconde cible du WAITFOR est renvoyé à un GOTO à cible unitaire, l'écriture compacte y est donc possible.
Attention ! Il ne peut y avoir qu'un seul waitfor actif en même temps par objet Piranha. En effet, le Type de Requête WAITFOR écrase les waitfor précédents ! Soyez donc précis lorsque vous voulez enchainer plusieurs actions : la seconde cible du waitfor est tout indiquée pour créer une balise GOTO qui exécutera votre action et lancera un autre waitfor.

exemple en situation :

TALKED -> PEEBOY_FIND_A_ROOM = GOTO -> WAITING_BEFORE_CONFESSING, CUTSCENE:START, MEMORY:TOO_LATE
$ -> WAITING_BEFORE_CONFESSING = WAITFOR -> TIMER:1, IS_ASHAMED
$ -> IS_ASHAMED = GOTO -> AVOID_LOOKING, EXPRESSION:SUSPENSION, WAITING_BEFORE_CONFESSING_AGAIN
$ -> AVOID_LOOKING = FACING -> DOWN ? FACING:LEFT / FACING:DOWN
$ -> WAITING_BEFORE_CONFESSING_AGAIN = WAITFOR -> TIMER:2, TALK:PEEBOY_PEE_ITS_PANTS
TALKED -> PEEBOY_PEE_ITS_PANTS = FACING -> DOWN ? CREATE_HORIZONTAL_PEE_PUDDLES / CREATE_VERTICAL_PEE_PUDDLES

L'exemple ici est une cinématique où PEEBOY confesse qu'il s'est accidentellement fait pipi dessus. Les WAITFOR ici permettent de marquer des temps de pause entre les dialogues afin de rendre la "confession" crédible. Voyez comme les 2 WAITFOR n'ont pas été créé en même temps dès le départ, c'est bien le premier qui créé le second dans sa cible.

Le Type de Requête WAITFOR accepte 3 cibles :
- TIMER:X (remplacer "X" par un nombre), attend X secondes avant d'effectuer la requête.
- PLAYER_FUTHER_THAN:X (remplacer "X" par un nombre), n'exécute requête que lorsque le joueur est plus loin que X cases.
- PLAYER_CLOSER_THAN:X (remplacer "X" par un nombre), n'exécute requête que lorsque le joueur est plus près que X cases.

Note : dans la mesure où un WAITFOR écrase les waitfor précédents, si l'on a besoin d'annuler un waitfor existant, il suffit d'écrire la requête "WAITFOR -> TIMER:0, NULL".


////// TRIPLE_ACTION //////


Le Type de Requête TRIPLE_ACTION permet de définir jusqu'à trois actions d'interactivités possibles avec l'objet.
Une "action d'interactivité" est une action qui est lancé lorsque le joueur clique sur la touche action du clavier lorsqu'il est à proximité de l'objet.
Pour écrire plusieurs Cibles, procédés comme avec GOTO : séparez les par des vigules ",".

exemple :
$ -> TA_INIT = TRIPLE_ACTION -> TALK:PEEBOY_INIT

Lorsque la Condition sera vérifiée, L'action TALK sera disponible et pointera vers le fichier "peeboy_init.csv"


Il est tout à fait possible de créer ses propres actions !

par exemple :
TIME -> 0 = TRIPLE_ACTION -> WATCH:YELLOW_PLANT_ACTION
$ -> YELLOW_PLANT_ACTION = TALK -> YELLOW_PLANT_THIRSTY

Ici, WATCH ne correspond à aucune action connue par le programme. Il va donc :
- chercher le nom à afficher à l'écran, dans le fichier "ressources/texts/(la langue)/actions".
- créer une balise GOTO dont la valeur est YELLOW_PLANT_ACTION.

La seconde instruction récupère cette balise, et sa requête stipule qu'une boite de dialogue doit s'ouvrir (voir TALK dans "requêtes ressources")
