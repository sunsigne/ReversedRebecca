////// CAMERA //////

Le Type de Requête CAMERA permet de définir le comportement de la Caméra, ou son emplacement, en fonction de la Cible.

Les Cibles permettent de modifier le comportement de la Caméra sont les suivantes :
PLAYER : ordonne à la Caméra de suivre le joueur.
PLAYER_FLUID : ordonne à la Caméra de suivre le joueur. Au moment de son enclenchement, Celle-ci se "déplacera très rapidement" vers lui au lieu de se "téléporter" sur sa Position.
FIX : ordonne à la caméra de cesser de suivre le joueur et de rester "là où elle se trouve actuellement".

Exemple : 
TIME -> 0 = CAMERA -> 0-0
TIME -> 0 = GOTO -> CAMERA:0-0

Lorsque la Condition sera vérifiée, la Caméra se placera en x = 0 et y = 0.

Les Cibles suivantes permettent de modifier le comportement de la Caméra :
PLAYER : ordonne à la Caméra de suivre le joueur.
PLAYER_FLUID : ordonne à la Caméra de suivre le joueur. Au moment de son enclenchement, Celle-ci se "déplacera très rapidement" vers lui au lieu de se "téléporter" sur sa position.
FIX : ordonne à la caméra de cesser de suivre le joueur et rester "là où elle se trouve actuellement".

Note : le comportement par défaut de la Caméra au chargement d'une carte est de se placer en 0-0.


////// CAMERA_SHAKE //////

Le Type de Requête CAMERA_SHAKE permet de faire "trembler" l'écran, afin de donner de l'impact à certaines actions.

La Cible est chiffrée, en pixels. Les valeurs suivantes sont égalements acceptées :
STRONG (vaut 40 pixels)
MEDIUM (vaut 18 pixels)
LITTLE (vaut 10 pixels)
TINY (vaut 3 pixels)

Exemple : 
TIME -> 0 = CAMERA_SHAKE -> MEDIUM
TIME -> 0 = GOTO -> CAMERA_SHAKE:MEDIUM

Lorsque la Condition sera vérifiée, la Caméra va "trembler" avec un décalage de 18 pixels.

Note : le tremblement se résorbe progressivement à raison d'un pixel par tick.


////// HIGHLIGHT //////

Le Type de Requête HIGHLIGHT permet de déterminer l'emplacement de l'ERA sous forme de détourage visuel d'un objet interactif, lorsque qu'il peut être utilisé. Le fichier de référence de ce détourage est du nom de l'objet (voir « NAME » dans la partie « Piranha – Type de Requêtes : States ») et se trouve dans le dossier « textures/(carte actuelle)/highlights ».

L'échelle est d'un pour une case (voir « HITBOX » dans la partie « Piranha – Type de Requêtes : States »). Il est possible d'écrire des Cibles à valeurs négatives.

Exemple :
$ -> HIGHLIGHT_INIT = HIGHLIGHT -> -1, -1, 2, 3

Lorsque la Condition sera vérifiée, l'ERA sous forme détourage visuel de l'objet sera décalé comme suit par rapport à l'objet : X=-1, Y=-1. Ce détourage aura une largeur de 2 et une hauteur de 3.



////// HIGHLIGHT_ABSOLUTE //////

Le Type de Requête HIGHLIGHT_ABSOLUTE a exactement le même effet et est soumis aux mêmes règles que Type de Requête HIGHLIGHT.

La seule différence avec ce dernier est que HIGHLIGHT_ABSOLUTE ne se base pas sur un décalage relatif "par rapport" à la Position de l'objet sur la carte, mais utilise les coordonnées de la carte directement.



////// HIGHLIGHT_REFRESH //////

Le Type de Requête HIGHLIGHT_REFRESH permet de réactualiser l'ERA sous forme de détourage visuel d'un objet à partir de son fichier de référence. En effet, changer le nom d'un objet n'actualise pas son détourage : la sélection du fichier de référence ne se met à jour que lorsque HIGHLIGHT_REFRESH est utilisé.

Note : ce Type de Requête est l'un des rares dont la Cible n'est toute simplement pas lue ! Elle doit tout de même être écrite afin de respecter la syntaxe attendue. Par souci de clarté, il est conseillé d'écrire quelque chose de cohérent, comme : TRUE, PROCESS ou START.

Exemple :
$ -> HIGHLIGHT_INIT = HIGHLIGHT_REFRESH -> PROCESS
$ -> HIGHLIGHT_INIT = GOTO -> HIGHLIGHT_REFRESH:PROCESS

Lorsque la Condition sera vérifiée, l'ERA sous forme détourage visuel de l'objet sera réactualisé et pointera vers le fichier de référence suivant : "(nom de l'objet).png".



////// HIGHLIGHT_ABOVE_PLAYER //////


Le Type de Requête HIGHLIGHT_ABOVE_PLAYER permet de changer une propriété de l'ERA sous forme de détourage visuel d'un objet, de sorte qu'il apparaisse soit devant, soit derrière le joueur.

Exemple :
TIME -> 0 = HIGHLIGHT_ABOVE_PLAYER -> FALSE
TIME -> 0 = GOTO -> HIGHLIGHT_ABOVE_PLAYER:FALSE

Lorsque la Condition sera vérifiée, l'ERA sous forme détourage de l'objet apparaîtra derrière le joueur.

Note : par défaut, l'ERA sous forme détourage de l'objet d'un objet apparaît devant le joueur.



////// DISPLAY //////

Le Type de Requête DISPLAY permet de déterminer l'emplacement visuel d'un objet à partir de coordonnées X et Y.

Rappel : parmi les objets Piranha, seuls les NPC ont un visuel.

L'échelle est de seize pixels pour une case (voir « HITBOX » dans la partie « Piranha – Type de Requêtes : States »). Il est possible d'écrire des à Cibles à valeurs négatives.

Exemple :
$ -> DISPLAY_SIT = DISPLAY -> 0, -1

Lorsque la Condition sera vérifiée, l'objet sera visuellement légèrement décalé vers le haut par rapport à sa Position réelle.

Attention ! De la même façon que le Type de Requête HITBOX ne change QUE les dimensions de la Hitbox d'un objet, DISPLAY ne change QUE le visuel de l'objet : aucune autre caractéristique n'est prise en compte.



////// INTERRUPT_BOSS //////

Le Type de Requête INTERRUPT_BOSS permet de terminer l'action en cours de tous les boss actuellement présents sur la même couche (voir « Couches » dans la partie « Piranha – Index ») que l'objet actuel. Dit autrement, si un boss est en train de se reposer, il retourne à l'attaque.

Note : ce Type de Requête est l'un des rares dont la Cible n'est toute simplement pas lue ! Elle doit tout de même être écrite afin de respecter la syntaxe attendue. Par souci de clarté, il est conseillé d'écrire quelque chose de cohérent, comme : TRUE, PROCESS ou START.

Exemple :
WONPUZZLE -> 10-20 = INTERRUPT_BOSS -> PROCESS

Lorsque la Condition sera vérifiée, le boss passera au paterne d'attaque (ou de repos) suivant.



////// CUTSCENE //////

Le Type de Requête CUTSCENE permet de lancer ou d'arrêter une scène cinématique.

La Cible unitaire de ce Type de Requête défini l'opération à effectuer :
- START : lancer une scène cinématique.
- STOP : arrêter une scène cinématique.
- STOP_WITH_DELAY : arrêter une scène cinématique après un court délai (1 seconde).

Lors du lancement d'une cinématique, trois événements se produisent :
- des bandes noires s'affichent en haut et en bas de l'écran,
- le joueur est centré sur sa case,
- les contrôles de l'utilisateur sur le joueur sont retirés, sauf pour les choix (voir « CHOICE » dans la partie « Piranha – Type de Requêtes : Actions »).

Exemple :
TIME -> 0 = CUTSCENE -> START
TIME -> 0 = GOTO -> CUTSCENE:START

Lorsque la Condition sera vérifiée, une scène cinématique sera lancée.

Note : la vitesse de marche du joueur est habituellement plus rapide que celle des NPC. Durant les cinématiques, cette vitesse devient identique.

Note : il peut parfois être utile de vérifier si le joueur respecte certaines conditions avant de lancer une cinématique (voir « READY_PLAYER » dans la partie « Piranha – Type de Requêtes : Conditionnelles »).

Attention ! Assurez-vous toujours qu'une cinématique ait une fin ! Sans quoi l'utilisateur ne reprendra pas le contrôle sur le joueur, ce qui causera un « softlock ».


L'Écriture Conditionnelle avec le Type de Requête CUTSCENE est possible, quoique légèrement différente des autres : elle vérifie toujours si une cinématique est en cours ; quelle que soit la Cible.

Exemple : 
TIME -> 100 = GOTO -> TRY_ARRIVE
$ -> TRY_ARRIVE = CUTSCENE -> RUNNING ? WAIT_ARRIVE / ARRIVE
$ -> WAIT_ARRIVE = WAITFOR -> TIMER:1 ? TRY_ARRIVE

Lorsque la Condition sera vérifiée, une nouvelle condition doit être vérifiée : une cinématique est-elle en cours ?
- si oui, effectuer l'action WAIT_ARRIVE (qui est une balise GOTO).
- si non, effectuer l'action ARRIVE (qui est une autre balise GOTO)

Explication : dans notre exemple la 3ème Instruction forme une boucle avec la seconde. De cette façon, l'action ARRIVE s'effectuera lorsque la cinématique sera finie (puisque cette boucle-ci implique que la nouvelle condition soit vérifiée chaque seconde jusqu'à sa validation).

Rappel : le mot « RUNNING » n'est pas analysé ici. L'Écriture Conditionnelle du Type de Requête CUTSCENE vérifiera TOUJOURS si une cinématique est en cours ; peu importe le mot écrit. Il est bien sûr conseillé d'écrire « RUNNING » afin que l'Instruction ait du sens à la lecture.



////// WAITFOR //////

Le Type de Requête WAITFOR est à la fois le plus utile et le plus compliqué à utiliser !

L'écriture d'un WAITFOR, même si elle est différente, ressemble à l'Écriture Conditionnelle (voir la partie « Piranha – Écriture Conditionnelle ») : il pose une "condition" à vérifier, suivi d'une ou de plusieurs Cibles séparées par des virgules – à la manière de GOTO (voir « GOTO » dans la partie « Piranha – Type de Requêtes : Goto ») – et à exécuter lorsqu'elle (la condition) est vérifiée.

Les différentes conditions qu'il est possible de vérifier sont les suivants :
- TIMER:X (remplacer "X" par un nombre) : n'exécuter la Requête que lorsque X secondes se sont écoulées.
- FACING:DIRECTION (remplacer "DIRECTION" par "LEFT", "RIGHT", "UP" ou "DOWN") : n'exécuter la Requête que lorsque l'objet appelant cette Instruction "regarde" dans la direction choisie (voir « FACING » dans la partie « Piranha – Type de Requêtes : States »).
- PLAYER_FUTHER_THAN:X (remplacer "X" par un nombre) : n'exécuter la Requête que lorsque le joueur est plus loin que X cases.
- PLAYER_CLOSER_THAN:X : (remplacer "X" par un nombre) : n'exécuter la Requête que lorsque le joueur est plus près que X cases.
- PLAYER_FACING:DIRECTION (remplacer "DIRECTION" par "LEFT", "RIGHT", "UP" ou "DOWN") : n'exécuter la Requête que lorsque le joueur regarde dans la direction choisie. (Note : il est possible de mettre un point d'exclamation "!" devant la direction pour obtenir l'inverse de la condition – c-.à-d. toutes les directions sauf celle indiquée).
- MOVE:X-Y (remplacer « X » et « Y » par des coordonnées) : n’exécuter la Requête que lorsque l'objet atteindra son nouveau Goal en X et Y. (MOVE peut être remplacé par SLOW ou FAST). Attention ! Ce type de WAITFOR attribue un Goal à l'objet ! (Voir « MOVE » dans la partie « Piranha – Type de Requêtes : Move »).
Note : vous l'aurez deviné, un WAITFOR peut tout à fait remplir immédiatement sa condition. Dans ce cas, les Cibles sont immédiatement exécutées.


ATTENTION ! IL NE PEUT Y AVOIR QU'UN SEUL WAITFOR ACTIF EN MÊME TEMPS PAR OBJET PIRANHA ! Ainsi, le Type de Requête WAITFOR écrase le WAITFOR précédent, soyez donc précis lorsque vous voulez enchaîner plusieurs actions.

Note : dans la mesure où un WAITFOR écrase les WAITFOR précédents, si l'on a besoin d'annuler un WAITFOR existant, il suffit d'écrire la Requête « WAITFOR → TIMER:0 ? NULL ».

Attention ! Certains Types de Requête lancent des Instructions "cachées" dont le Type de Requête est WAITFOR. Prenez bien garde en les utilisant à ne pas écraser le WAITFOR précédent ! Rassurez-vous, ils sont peu nombreux et cela sera systématiquement précisé.


Exemple de situation :
TALKED -> BOB_TOILET = GOTO -> CUTSCENE:START, WAIT_ASHAME
$ -> WAIT_ASHAME = WAITFOR -> TIMER:1 ? ASHAME
$ -> ASHAME = GOTO -> AVOID_LOOK, EXPRESSION:SUSPENSION, WAIT_CONFESS
$ -> AVOID_LOOK = FACING -> DOWN ? FACING:LEFT / FACING:DOWN
$ -> WAIT_CONFESS = WAITFOR -> TIMER:2 ? TALK:BOB_PISSED_ITSELF

Explication : nous avons ici une cinématique (voir « CUTSCENE » dans la partie « Piranha – Type de Requêtes : Autres ») où Bob confesse qu'il s'est accidentellement uriné dessus. Les WAITFOR présents permettent de marquer des temps de pause entre les dialogues afin de rendre la "confession" plus naturelle et crédible. Voyez comme les deux WAITFOR ne se superposent pas : le second est créé une fois que le premier a validé sa condition.

Attention ! Lorsqu'un objet est poussé (voir « PUSH » dans la partie « Piranha – Type de Requêtes : Move »), il est "stun", il est « stun » (voir « STUNNED » dans la partie « Piranha – Type de Requêtes : Conditionnelles »). Aussitôt qu'est appelée une Instruction dont le Type de Requête est WAITFOR, l'objet est automatiquement "dé-stun", ce qui a pour effet de l'immobiliser pendant un court instant ; donc d'annuler la poussée. Il ne faut pas appeler le Type de Requête WAITFOR juste après avoir utilisé le Type de Requête PUSH.

Pour le dire plus simplement, n'écrivez pas :
TIME → 0 = GOTO → PUSH:UP, WAIT_STUFF

Écrivez à la place :
TIME → 0 = GOTO → WAIT_STUFF, PUSH:UP



////// END_LVL //////

Le Type de Requête END_LVL prépare les nouvelles cartes pour l'écran titre et pour le joueur, et est à utiliser lorsque l'objectif d'une carte est atteint.

La 1ère Cible de ce Type de Requête défini l'opération à effectuer :
- NORMAL : afficher l'écran de fin de carte.
- QUIET : envoyer directement le joueur dans la carte suivante (à privilégier dans les workshop).
- START_GAME : envoyer le joueur dans le menu de l'écran titre du jeu.
- END_GAME : envoyer le joueur vers les crédits de fin du jeu.

Note : dans le cas d'une première Cible "START_GAME", les Cibles suivantes ne sont tout simplement pas lues ! Elles doivent tout de même être écrites afin de respecter la syntaxe attendue.

Note : les demandes de sauvegarde enregistrées par le Type de Requête SAVE (voir « SAVE » dans la partie « Piranha – Type de Requêtes : Memory ») sont traitées aussitôt le Type de Requête END_LVL appelé (c-.à-d. avant même que ses Cibles soient analysées).

Exemple :
WONPUZZLE -> 10-20 = END_LVL -> NORMAL, REBECCAS_ROOM_1, LVL001

Lorsque le puzzle initié par le puzzler en X=10 Y=20 sera résolu, la carte actuelle prendra fin et la carte « LVL001 » sera chargée. Parallèlement, l'écran titre affichera à présent la carte « REBECCAS_ROOM_001 ». Avant que le joueur ne soit plongé dans la nouvelle carte, un écran de fin de carte s'affichera (voir la partie « Écran de fin de carte »).
