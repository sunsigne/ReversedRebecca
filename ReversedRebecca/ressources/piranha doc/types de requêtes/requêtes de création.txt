Attention ! Pour tous les Types de Requête suivants, leur effet s'applique sur la même "couche" que l'objet qui le demande ("voir "couches" dans "index.txt"). Pour rappel et au besoin, vous pouvez utiliser SET-UP, qui est un "objet virtuel" se trouvant sur la même couche que celle où le joueur a commencé.
Également, en lieu et place du couple de coordonnées x-y, il est possible d'écrire le mot clef ONTHESPOT; les coordonnées seront dans ce cas automatiquement celles de l'objet Piranha qui demande l'action.

Attention : Pour les Types de Requête suivant, la syntaxe est particulièrement exigeante : le signe ":" est parfois utilisé en parallèle au signe habituel "," comme "séparateur de cibles". Soyez très attentif aux exemples donnés afin d'écrire une Requête correcte !



////// CREATE //////

Le Type de Requête CREATE permet de créer un objet à partir de coordonnées X, Y et Z, et du code RGB d'un mappable (voir le fichier "mappable.txt" dans le dossier "maps").

Les coordonnées X et Y sont des nombres. La coordonnée Z correspond à l'Index de l'objet (voir la partie « Piranha – Index ») : « FRONT » ou « BACK ».

Le paramètre déterminant la Sous-Couche (voir « Sous-Couches » dans la partie « Piranha – Index ») pour ce Type de Requête n'est pas demandé et est automatiquement défini sur « WORLD ».

Exemple :
TIME -> 0 = CREATE -> 10-20-FRONT:1-255-0
TIME -> 0 = CREATE -> ONTHESPOT-FRONT:1-255-0

Lorsque la Condition sera vérifiée, une porte bleue nulle (1-255-0) sera créée aux coordonnées X=10 Y=20 et sera placée devant les objets ayant la même Position.

Attention ! Créer un objet au même endroit qu'un autre peut avoir des conséquences involontaires en termes de collisions ! Soyez certains de ce que vous faites.



////// CREATE_DECORATION //////

Le Type de Requête CREATE_DECORATION permet de créer un visuel à partir d'un fichier image.

Fichier de référence : « textures/other/decoration/(cible).png ».

Exemple :
TIME -> 0 = CREATE_DECORATION -> 10-20-BACK:WORLD,1,2,HAIR

Lorsque la Condition sera vérifiée, sera créée sur la carte aux coordonnées X=10 Y=20 un visuel apparaissant derrière les autres objets, de largeur 1 case, de hauteur 2 cases, et dont le fichier de référence est « hair.png ».

Par définition, les visuels n'ont pas de collisions. Si vous avez besoin que votre objet soit un « interactif » (objet interactif), il faudra créer un objet Piranha au même emplacement et en définir les propriétés.

Note : si le programmeur Piranha peut préciser les dimensions de l'objet à afficher là où le programme Java serait en mesure de les estimer correctement à partir des dimensions du fichier de référence, c'est pour permettre au programmeur de "mentir" et d'afficher – de façons situationnelles – des textures hautes définitions (par exemple, pour un effet comique).



////// CREATE_ANIMATION //////

Le Type de Requête CREATE_ANIMATION est une variante complexe de CREATE_DECORATION : elle permet de créer un visuel ayant une animation.

Fichier de référence : « textures/other/animation/(cible).png ». 

Note : les images constituant l'animation doivent toutes être rassemblées dans un seul fichier, en ligne de gauche à droite. Le jeu détectera automatiquement leur nombre.

En plus des mêmes Cibles que celles demandées par le Type de Requête CREATE_DECORATION, CREATE_ANIMATION a besoin de deux Cibles supplémentaires :
- la "durée" d'animation en "ticks" (60 ticks = 1 seconde). Exemple : « 120 » signifie que chaque image de l'animation restera pendent exactement 2 secondes,
- un boolean informant de si l'animation doit, ou non, recommencer une fois terminée. Exemple : « false » signifie que l'animation s'arrêtera sur la dernière image.

Exemple :
! -> PLAYER_FILL_BATH = CREATE_ANIMATION -> 1-8-BACK:WORLD,1,2,BATH_FILLING,3,90,FALSE

Lorsque la Condition sera vérifiée, sera créé un visuel animé :
- dont les coordonnées sont X=10 Y=20,
- apparaissant derrière les autres objets (joueur inclus),
- dans la Sous-Couche « WORLD »,
- de largeur 1 case, de hauteur 2 cases,
- nécessitant les fichiers de références « bath_filling_XX.png » (où XX sont des nombres allant de 00 à 99),
- où chaque image reste pendant 90 ticks (1 seconde et demie),
- qui s'arrête sur la dernière image (la baignoire est remplie).

Note : si le programmeur Piranha précise des dimensions à afficher différentes des réelles dimensions des images constituant l'animation dans le fichier de référence, elles doivent alors avoir une largeur et une hauteur identique (le jeu ne pouvant pas à la fois "deviner" la largeur d'une seule image et leurs nombres, la largeur est définie par le jeu comme étant égale à la hauteur).


////// CREATE_SIMULATION //////

Le Type de Requête CREATE_SIMULATION permet de créer l'animation des « Dalles de Générations » qu'on retrouve au workshop (voir « Dalles de générations » dans la partie « Workshop »).

CREATE_SIMULATION est une extension du Type de Requête CREATE_ANIMATION, avec des propriétés fixes :
- la Sous-Couche est définie comme étant « GROUND »*,
- l'Index est défini comme étant « FRONT »*,
- le nombre d'images attendus constituant l'animation dans le fichier de référence est fixé à exactement 5,
- la première image reste pendant 0.65 seconde,
- chaque image suivante reste pendant 0.05 seconde,
- l'animation s'arrête sur la dernière image,
- un son spécifique est joué.

*Ces 2 propriétés s'assurent que l'objet apparaisse au niveau du sol, sans pour autant apparaître "sous" la carte.

Dans l'exemple suivant, les deux dernières cible permettent de déterminer le chemin d'accès des fichiers.

Exemple : 
TIME -> 0 = CREATE_SIMULATION -> 0-0:9,11,000,0

Lorsque la Condition sera vérifiée, sera créé un visuel animé :
- dont les coordonnées sont X=0 Y=0,
- de largeur 9 case, de hauteur 11 cases,
- nécessitant un fichier de référence dont le nom est "0.png", situé dans le dossier « textures/workshop/000 ».



////// CREATE_BONUSTEXT //////

Le Type de Requête CREATE_BONUSTEXT permet de créer un « bonus texte » à l'emplacement désigné. Ce texte aura les mêmes propriétés que les textes qui s'affichent lors de ramassage d'objets (c.-à-d. qu'ils apparaissent, vont lentement vers le haut, puis disparaissent après 0.6 seconde).

La seconde Cible détermine l'importance du texte en termes d'ERA :
- NORMAL : le regard du joueur (pas le personnage, le joueur devant son écran) est déjà au niveau de l'élément en question.
- IMPORTANT : le regard du joueur DOIT être attiré par l'élément en question.

Note : aucun Index n'est à renseigner pour ce Type de Requête : les bonus textes sont créés sur une couche spécialement dédiée.

Exemple :
TIME -> 0 = CREATE_BONUSTEXT -> 10-20,NORMAL,MON_TEXTE

Lorsque la Condition sera vérifiée, sera créé aux coordonnées X=10 Y=20 un bonus texte d'importance normale et dont le contenu sera les mots trouvés dans les ressources correspondants aux termes « MON_TEXTE ».

Note : puisqu'ils disparaissent tous seuls naturellement en moins d'une seconde, il n'existe aucun Type de Requête pour supprimer un bonus texte.



////// COLLAPSE //////

Le Type de Requête COLLAPSE permet de créer un « éboulement » à partir d'une direction de poussée, de coordonnées X et Y, et du code (R)GB d'un mappable (voir le fichier "mappable.txt" dans le dossier "maps").

Contrairement au Type de Requête CREATE, la coordonnée Z n'est pas demandée : elle est d'office définie comme étant BACK. Le "paramètre rouge" du mappable n'est pas non plus demandé : il est d'office défini sur 2, ce qui correspond à un puzzler de type « gravas » (voir la partie « Puzzler – Rubble »).

Le Type de Requête COLLAPSE provoque les actions suivantes :
- un son spécifique est joué,
- des "bonus textes d'éboulement" apparaissent autour de la zone sur laquelle l'éboulement est en train d'avoir lieu,
- un puzzler de type « gravas » est créé au bout de quelques secondes.

Exemple :
TIME -> 10 = COLLAPSE -> UP,10-20,255-1

Lorsque la Condition sera vérifiée :
- un éboulement aura lieu aux coordonnées X=10 Y=20,
- durant cet éboulement, les objets "poussables" (NPC inclus) se trouvant sur les lieux perdront 1 PV, et (s'ils y survivent) seront poussés vers le haut (UP),
- à l'issue de cet éboulement, un objet "Gravas horizontales bleus cyan" (2-255-1) sera créé.



////// DELETE //////

Le Type de Requête DELETE permet de supprimer un objet à partir de cordonnées X et Y, d'une Sous-Couche, et d'une coordonnée Z (voir la partie « Piranha – Index »). La coordonnée Z correspond à l'Index chiffré de l'objet.

Attention ! DELETE est un Type de Requête puissant, les NPC se déplaçant en permanence, ne les supprimez pas par accident !

Exemple :
TIME -> 0 = DELETE -> 10-20:WORLD,1

Lorsque la Condition sera vérifiée, l'objet aux coordonnées X=10 Y=20, contenu dans la Sous-Couche WORLD et d'Index 1, sera supprimé.

Rappel : il est impossible de supprimer le joueur de cette façon : une sécurité empêche de le sélectionner à partir d'un Index.

Attention ! Aussitôt qu'un objet est supprimé, son fichier Piranha ne sera plus lu, puisque seuls les objets présents sur la carte son analysé.



////// DELETE_ONTHESPOT //////

Est un raccourci direct du Type de Requête DELETE. Les deux Instructions suivantes sont strictement équivalentes :

TIME -> 0 = DELETE -> ONTHESPOT:WORLD,1
TIME -> 0 = GOTO -> DELETE_ONTHESPOT:1

Les coordonnées sont définies comment étant celles de l'objet actuel. La Sous-Couche est implicitement considérée comme étant WORLD, rendant la Cible Index unitaire, et donc l'Écriture Compacte possible (ce qui est précisément l'intérêt de ce Type de Requête).



////// DELETE_MYSELF //////

Le Type de Requête DELETE_MYSELF permet de supprimer l'objet actuel (c.-à-d. l'objet dont le fichier Piranha contient cette Instruction).

L'avantage de ce Type de Requête sur le Type de Requête DELETE_ONTHESPOT est qu'il évite toute ambiguïté en cas de superposition d'objets !

Attention ! De la même façon que pour le Type de Requête DELETE, toute Requête effectuée après ce Type de Requête ne se lancera pas (puisque l'objet sera supprimé).

Note : ce Type de Requête est l'un des rares dont la Cible n'est toute simplement pas lue ! Elle doit tout de même être écrite afin de respecter la syntaxe attendue. Par souci de clarté, il est conseillé d'écrire quelque chose de cohérent, comme : TRUE, PROCESS ou START.

Exemple :
TIME -> 5 = DELETE_MYSELF -> START
TIME -> 5 = GOTO -> DELETE_MYSELF:PROCESS

Lorsque la Condition sera vérifiée, l'objet lançant cette Instruction sera supprimé.

Note : par soucis de clarté, il est conseillé d'écrire pour cible : TRUE, PROCESS, START ou n'importe quoi de cohérent.
