////// POSITION //////

La position d'un objet en Piranha est la "case" la plus proche de laquelle il se trouve.
Lorsqu'on créer un objet, il est créé sur la case exacte demandée.
Lorsqu'on cherche implicitement la position d'un objet (par exemple avec DISABLE, DELETE, etc.), l'objet est considéré sur la "case" seulement s'il est majoritairement sur cette dernière.
Ainsi, un objet n'est considéré sur "une case" que lorsqu'il est majoritairement dessus. S'il y dépasse "un peu", ça ne compte pas.

Il existe une exception à cette règle : Le Joueur.
Afin d'avoir un pathfinding efficace, le Joueur est considéré sur une case même si un seul pixel touche cette dernière.
Il est donc le seul objet qui peut se trouver sur plusieurs cases à la fois.

Lorsque plusieurs objets se trouve sur une même case, il faut faire intervenir la notion d'index pour les différencier.


////// COUCHES //////

Une notion très importante à ne jamais oublier en Piranha et celle des LAYER - "couche" en français, mais il faut comprendre étage -.
À CHAQUE FOIS qu'il est question d'une position en Piranha, la position en question est cherchée au même "étage" que l'objet faisant la demande.
Par exemple, il n'est pas possible pour un objet d'utiliser le type de condition WONPUZZLE afin de vérifier si le Puzzle d'un autre étage est résolu ! Il faudra pour cela passer par un AFFECTING (qui est indépendant de la position, donc applicable partout).

Cette information est d'autant plus importante à garder en tête avec le fichier SET-UP : "l'objet" SET-UP est construit lors du chargement de la map sur la couche où se trouve le joueur.
Note : "l'objet" SET-UP ne "suit" pas le joueur si ce dernier change de couche, il reste là où il a été créé.


////// INDEX //////

Certains Types de Requêtes se base sur la position d'un objet (ex: DISABLE, DELETE, etc.) Dans la mesure ou plusieurs objets peuvent se trouver au même endroit, ces requêtes ont besoin, en plus des coordonnées de l'objet, d'un index.
L'index fonctionne de la façon suivant :

Lorsqu'il n'y a qu'un seul objet : l'index est de 1.
Lorsqu'il y a plusieurs objets, le dernier objet créé aura l'index le plus bas* ! Ce qui signifie qu'un objet qui avait un index 1 pourra très bien avoir un index 2 dans le futur !
Un index trop élevé sera ramené systématiquement à l'index le plus haut trouvé : s'il n'y a qu'un objet et que vous entrez comme index 3, l'index sera "lu" comme 1. Cette dernière propriété peut être très pratique pour conserver le même index pour un même objet.

*Note : il existe des exceptions à cette règle : le Type de Requête DISPLAY influence l'index (voir types de requêtes/requêtes autre.txt).

Exemple pratique :

Nous avons besoin qu'un personnage parle à travers une porte, chose à-priori non autorisée "de base" par le jeu.
Nous allons donc "désactiver" (DISABLE) la porte et créer un Piranha objet par-dessus cette dernière, qui se comporterait comme le PNJ le ferait, ce qui créera l'illusion de parler à ce dernier.
Lorsque nous voulons désactiver la porte, nous pouvons indiquer l'index 2 (qui sera considéré comme 1), puis créer l'objet Piranha qui sera plus récent, donc qui prendra l'index 1 et "poussera" la porte en index 2.
Lorsque nous ferons référence à la porte par la suite, nous continuerons à utiliser l'index 2 (qui sera cette fois "officiellement" le bon).
Nous avons donc utilisé le même index (2) tout au long de notre code pour désigner la porte.

Ç'est à l'air un peu technique, mais ne vous en fait pas ! La plupart du temps, vous n'aurez affaire qu'à un seul objet.
Si un jour vous en avez plusieurs, faites des essais jusqu'à ce que ça passe et ça devrait aller ! Retenez simplement : index le plus bas = objet le plus récent.